<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>thelaziestprogrammer.com</title>
   
   <link>http://thelaziestprogrammer.com</link>
   <description>Because someone else has already solved your problem.</description>
   <language>en-uk</language>
   <managingEditor> Sean Harrington</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Tweet Harvester w/ Flask & Tweepy (Part 1)</title>
	  <link>/sharrington/web-development/tweet-archiver-with-flask-and-tweepy-part-1</link>
	  <author>Sean Harrington</author>
	  <pubDate>2017-02-10T20:15:03-05:00</pubDate>
	  <guid>/sharrington/web-development/tweet-archiver-with-flask-and-tweepy-part-1</guid>
	  <description><![CDATA[
	     <h4 id="intro">Intro</h4>
<p>Flask is a versatile microframework capable of doing just about anything that you ask of it. Flask ships with <strong>Jinja2</strong> as its HTML Templating Engine, and when combined with <strong>SQLAlchemy</strong>, provides full-stack development support that rivals bulkier framework (like Django).</p>

<p>All that said, I believe Flask’s best characteristic to be its ‘microframework’ status: there are <a href="http://flask.pocoo.org/extensions/">many add-ons and extensions</a> which can be utilized “a la carte”, rather than “out of the box”. This means multiple solutions to single problems, which almost always leads to better solutions in the open-source community. The “slim” nature of the framework also makes bootstrapping projects easier, with much less boilerplate code &amp; dogmatic “best-practices”.</p>

<p>In the first step, we will use <strong>Tweepy</strong>, and Flask’s core to build a quick dashboard to view a user’s Twitter Activity. In Part II, we will explore <strong>SQLAlchemy</strong> and <strong>Flask-restless</strong> to create an API to harvest &amp; archive Tweets in a database.</p>

<p><em>I will be using Python 3.6 (faster dictionaries, default utf-8 strings, etc.), but feel free to follow along with any flavor of Python (some people don’t like to let go…)</em></p>

<h3 id="setup-our-workspace">Setup our workspace</h3>

<p><strong>Important:</strong> <em>If you don’t know what a Python virtual environment is, <a href="https://packaging.python.org/installing/#creating-virtual-environments">read about them here</a> before continuing!</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>mkdir tweet-harvester
<span class="nb">cd </span>tweet_harvester
python -m venv env
<span class="c"># Or 'virtualenv env' to start a NEW project with OLD tools</span>
<span class="nb">source </span>env/bin/activate
mkdir tweet_harvester
touch tweet_harvester/__init__.py run.py config.py
</code></pre>
</div>

<p>Your directory structure should look like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>tweet_harvester/
    tweet_harvester/
        __init__.py
    run.py
    config.py
    env/
</code></pre>
</div>

<h3 id="install-dependencies-with-pip">Install dependencies with pip</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>pip install flask tweepy flask-restless
</code></pre>
</div>

<h3 id="hello-world-from-flask">Hello World from Flask</h3>

<ol>
  <li>Open up the <code class="highlighter-rouge">__init__.py</code> file created in step (1), entering the following content:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="c"># Instantiate our app...</span>
<span class="c"># Name it the '__name__' of this module (tweet-harvest)</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c"># Later, we will store our Twitter tokens/keys</span>
<span class="c"># in config.py...we load our config here.</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="s">'config'</span><span class="p">)</span>

<span class="c"># We define our URL route, and the controller to handle requests</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>
</code></pre>
</div>

<ol start="2">
  <li>Next open the <code class="highlighter-rouge">run.py</code> file created earlier, inserting the following content:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">tweet_harvester</span> <span class="kn">import</span> <span class="n">app</span>
<span class="c"># 'app' originates from the line 'app = Flask(__name__)'</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span>
</code></pre>
</div>

<ol start="3">
  <li>Finally, start the server</li>
</ol>

<p><strong>Important:</strong> <em>The Flask development server should <strong>never</strong> be used in Production environments, nor should <code class="highlighter-rouge">app.config['DEBUG'] == True</code> in Production. In Production, you’d want to wrap your Flask application with a WSGI server, like <a href="http://gunicorn.org/">Gunicorn</a></em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>python run.py
</code></pre>
</div>
<p>…and open up your web browser to <a href="http://localhost:8080">http://localhost:8080/</a>, and verify our Hello World test.</p>

<p>Hello World with Flask is <strong>easy</strong>. Setting up and configuring a project is often one of the most difficult tasks when developing on the full-stack, as you only do it a handful of times each year (<em>think about it!</em>). Flask (<em>and Python</em>) make this hurdle an easy one to leap.</p>

<h3 id="create-a-new-twitter-application-tokens-and-keys">Create a new Twitter Application, Tokens and Keys</h3>

<ol>
  <li>Navigate to <a href="https://apps.twitter.com">https://apps.twitter.com</a>, and sign in with existing Twitter credentials, or make a new account.</li>
  <li>Click <strong>Create New App</strong> ( or just click <a href="https://apps.twitter.com/app/new">here</a> )</li>
  <li>Enter a <strong>Name</strong>, a <strong>Description</strong>, and for <strong>Website</strong> enter <em>http://foobar.com</em> (as this does not matter for the time being). Leave the <strong>Callback URL</strong> blank. Accept the developer terms, and click <strong>Create your Twitter application</strong>. <img src="/assets/images/twitter_new_application.png" alt="New Twitter Application" /></li>
  <li>On the resulting screen after app creation, navigate to the <strong>Keys and Access Tokens</strong> tab. Scroll down to <strong>Your Access Token</strong>, and click the <strong>Create my access token</strong> button. <img src="/assets/images/twitter_tokens_keys_and_secrets.jpg" alt="Twitter Access Tokens" /></li>
  <li>Once these tokens generate (should take a second or 2), you’ll want to use them in the next step.</li>
</ol>

<h3 id="deploy-our-twitter-activity-dashboard">Deploy our Twitter Activity Dashboard</h3>

<ol>
  <li>Create Twitter Environment Variables in <code class="highlighter-rouge">~/.bash_profile</code>.</li>
</ol>

<p><em>This file gets loaded every time your user account starts a new shell. For system-wide variables, enter data into <code class="highlighter-rouge">/etc/profile</code>.</em></p>

<p><em>Your <code class="highlighter-rouge">~/.bash_profile</code> <strong>or</strong> <code class="highlighter-rouge">/etc/profile</code> should contain:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>EXPORT <span class="nv">TWITTER_CONSUMER_KEY</span><span class="o">=</span>your_consumer_key_here
EXPORT <span class="nv">TWITTER_CONSUMER_SECRET</span><span class="o">=</span>your_consumer_secret_here
EXPORT <span class="nv">TWITTER_ACCESS_TOKEN</span><span class="o">=</span>your_access_token_here
EXPORT <span class="nv">TWITTER_ACCESS_TOKEN_SECRET</span><span class="o">=</span>your_access_token_secret_here
</code></pre>
</div>

<p><strong>IMPORTANT!</strong> After saving this file, run the following command to load your new ENV variables:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nb">source</span> ~/.bash_profile
<span class="c"># or "source /etc/profile"</span>
</code></pre>
</div>

<ol start="2">
  <li>Load these Environment Variables into <code class="highlighter-rouge">config.py</code>:</li>
</ol>

<p><em>We want to load these from our Environment, rather than pasting the codes directly into <code class="highlighter-rouge">config.py</code> for obvious security reasons.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span> 
<span class="c"># Enable stacktrace &amp; debugger in web browser</span>
<span class="n">TWITTER_CONSUMER_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_KEY'</span><span class="p">]</span>
<span class="n">TWITTER_CONSUMER_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_SECRET'</span><span class="p">]</span>
<span class="n">TWITTER_ACCESS_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN'</span><span class="p">]</span>
<span class="n">TWITTER_ACCESS_TOKEN_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN_SECRET'</span><span class="p">]</span>
</code></pre>
</div>

<ol start="3">
  <li>Update <code class="highlighter-rouge">__init__.py</code> by adding Twitter authentication</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">import</span> <span class="nn">tweepy</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="c"># Load our config from an object, or module (config.py)</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="s">'config'</span><span class="p">)</span>

<span class="c"># These config variables come from 'config.py'</span>
<span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">OAuthHandler</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_KEY'</span><span class="p">],</span>
                           <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_SECRET'</span><span class="p">])</span>
<span class="n">auth</span><span class="o">.</span><span class="n">set_access_token</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN'</span><span class="p">],</span>
                      <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN_SECRET'</span><span class="p">])</span>
<span class="n">tweepy_api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>
</code></pre>
</div>

<ol start="4">
  <li>Define our <code class="highlighter-rouge">get_tweets()</code> function in <code class="highlighter-rouge">__init__.py</code></li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="n">tweets</span> <span class="o">=</span> <span class="n">tweepy_api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>                                                                            
    <span class="k">return</span> <span class="p">[{</span><span class="s">'tweet'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
              <span class="s">'created_at'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> 
              <span class="s">'username'</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
              <span class="s">'headshot_url'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">}</span>
           <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tweets</span><span class="p">]</span>
</code></pre>
</div>

<ol start="5">
  <li>Create <code class="highlighter-rouge">templates/</code> and <code class="highlighter-rouge">tweets.html</code></li>
</ol>

<p><em>This HTML file will render the data obtained in the <code class="highlighter-rouge">get_tweets()</code> function above. Note that we load Bootstrap 4 (alpha-release) from maxcdn.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">&lt;!-- templates/tweets.html --&gt;</span>  
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1, shrink-to-fit=no"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;title&gt;</span>Tweet Harvester<span class="nt">&lt;/title&gt;</span>

    <span class="c">&lt;!-- Bootstrap 4 Stuff https://v4-alpha.getbootstrap.com/  --&gt;</span> 
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
          <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"</span>
          <span class="na">integrity=</span><span class="s">"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ"</span>
          <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- End Bootstrap 4 stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"p-3"</span><span class="nt">&gt;</span>Tweet Harvester<span class="nt">&lt;/h1&gt;</span>
      {% for tweet in tweets %}
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"list-group-item list-group-item-action flex-column align-items-start"</span><span class="nt">&gt;</span>
           <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"d-flex w-100 justify-content-between"</span><span class="nt">&gt;</span>
             <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"{{tweet.headshot_url}}"</span> <span class="na">class=</span><span class="s">"w-12 p-1 float-left image-thumbnail"</span><span class="nt">&gt;</span>  
             <span class="nt">&lt;h5</span> <span class="na">class=</span><span class="s">"ml-10 w-75 mb-1"</span><span class="nt">&gt;</span>{{ tweet.tweet }}<span class="nt">&lt;/h5&gt;</span>
             <span class="nt">&lt;small&gt;</span>{{ tweet.created_at }}<span class="nt">&lt;/small&gt;</span>
           <span class="nt">&lt;/div&gt;</span>
         <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      {% endfor %}
      
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre>
</div>

<p>Your directory structure should look like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>tweet_harvester/
    tweet_harvester/
        __init__.py
        templates/
            tweets.html
    run.py
    config.py
    env/
</code></pre>
</div>

<ol start="6">
  <li>Add <strong>route</strong> and <strong>controller</strong> to <code class="highlighter-rouge">__init__.py</code> to render this template</li>
</ol>

<p><em>We get the <code class="highlighter-rouge">username</code> parameter below directly from the URL with the <code class="highlighter-rouge">/&lt;string:username&gt;</code> segment of our route’s URL. We then pass it to the <code class="highlighter-rouge">tweets(username)</code> function.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/tweet-harvester/&lt;string:username&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
  <span class="c"># 'tweets' is passed as a keyword-arg (**kwargs)</span>
  <span class="c"># **kwargs are bound to the 'tweets.html' Jinja Template context</span>
  <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">"tweets.html"</span><span class="p">,</span> <span class="n">tweets</span><span class="o">=</span><span class="n">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">))</span>
</code></pre>
</div>
<p><em>Flask leverages the Jinja2 Templating Engine. In our Flask controller, we return with:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">var1</span><span class="o">=</span><span class="n">obj1</span><span class="p">,</span> <span class="n">var2</span><span class="o">=</span><span class="n">obj2</span><span class="p">,</span> <span class="n">varN</span><span class="o">=</span><span class="n">objN</span><span class="p">)</span>
</code></pre>
</div>

<p><em>…with an infinite number of <code class="highlighter-rouge">var=obj</code> bindings. These bindings are <a href="http://stackoverflow.com/questions/1769403/understanding-kwargs-in-python">passed via <strong>**kwargs</strong></a> to create the template’s <strong>context</strong>. This Jinja <strong>context</strong> is available anywhere within a Jinja <strong>block</strong>, where we can embed Python to modify/render values.</em></p>

<p><em>An <strong>example Jinja for-loop block</strong> is as follows:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>
<span class="nt">&lt;ul&gt;</span>
  {% for elem in var1 %}
  <span class="nt">&lt;li&gt;</span>{{elem}}<span class="nt">&lt;/li&gt;</span>
  {% endfor %} )
<span class="nt">&lt;/ul&gt;</span>

</code></pre>
</div>
<p><em>…which would render a list-item <strong>&lt;li&gt;</strong> for each <strong>elem</strong> in the <strong>list</strong> bound to <strong>var1</strong>.</em></p>

<ol start="6">
  <li>Start your server, and test with any Twitter handle</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code>python run.py
</code></pre>
</div>
<p><em>Navigate to <a href="http://localhost:8080/tweet-harvester/realDonaldTrump#">http://localhost:8080/tweet-harvester/realDonaldTrump</a> to test!</em></p>

<hr />

<h4 id="part-i-complete">Part I Complete!</h4>

<p>You’ve succesfully deployed a simple Twitter Activity dashboard, and have gotten your hands dirty with some of Flask’s core features and concepts, namely:</p>

<ol>
  <li>Jinja2</li>
  <li>Flask Routes &amp; Controllers (Views)</li>
  <li>Flask Project Structure</li>
  <li>Starting the Flask Development Server</li>
</ol>

<p>Our next step will be to define a SQLAlchemy model for a <strong>Tweet</strong>, and automagically generate CRUD endpoints based off of this model with <strong>Flask-restless</strong>. This will enable us to archive tweets, from our Activity Dashboard to a local SQLite database.</p>


	  ]]></description>
	</item>

	<item>
	  <title>REST API with Flask-Restless and SQLAlchemy</title>
	  <link>/sharrington/web-development/sqlalchemy-defined-rest-api</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-08-19T02:32:00-04:00</pubDate>
	  <guid>/sharrington/web-development/sqlalchemy-defined-rest-api</guid>
	  <description><![CDATA[
	     <p>This post shows how to auto-generate a REST API from a handful of SQLAlchemy models. This means full CRUD <em>(POST, GET, PUT, DELETE)</em> endpoint generation for each SQLAlchemy model defined.</p>

<p>Let’s say our company is building a Single-Page Application for librarians &amp; readers that accomplishes the following 2 goals:</p>

<ol>
  <li>Show the availability and information of a given book to readers.</li>
  <li>Allow a librarian to perform CRUD operations to update their libary’s inventory.</li>
</ol>

<p>We’ve been tasked with building a REST API to allow a Single-Page Application to interface with our database.</p>

<h4 id="environment-setup">Environment Setup</h4>
<ol>
  <li>Create project root directory.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
</code></pre>
    </div>
  </li>
  <li>Create and activate virtualenv.
    <div class="highlighter-rouge"><pre class="highlight"><code>cd automagic_api;
virtualenv env;
source env/bin/activate
</code></pre>
    </div>
  </li>
  <li>Install flask-restless and sqlalchemy
    <div class="highlighter-rouge"><pre class="highlight"><code>pip install flask-restless sqlalchemy
</code></pre>
    </div>
  </li>
</ol>

<p>Your project directory tree should look as follows:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
env/
</code></pre>
</div>

<h4 id="further-compartmentalize-the-project-and-define-our-models">Further compartmentalize the project and define our models</h4>

<ol>
  <li>Create nested project directory ‘/automagic_api’ to hold Flask-specific files.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
cd automagic_api
</code></pre>
    </div>
  </li>
  <li>Create <strong>‘models.py’</strong> within the flask-project directory and define <strong>Book</strong> and <strong>Author</strong>..</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">ForeignKey</span><span class="p">,</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">Boolean</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">backref</span><span class="p">,</span> <span class="n">relationship</span>
<span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">Base</span>

<span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="c"># API endpoint will take the form '/api/__tablename__'</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">Book</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">title</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">author_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> 
        <span class="n">ForeignKey</span><span class="p">(</span><span class="s">"author.id"</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span> 
        <span class="n">backref</span><span class="o">=</span><span class="n">backref</span><span class="p">(</span><span class="s">'books'</span><span class="p">))</span>  
    <span class="n">is_available</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Boolean</span><span class="p">)</span>


</code></pre>
</div>

<p>Your directory structure should now look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
   env/
</code></pre>
</div>

<h4 id="create-controllerspy-to-define-endpoints">Create controllers.py to define endpoints</h4>

<p>Below we define our 2 <a href="http://flask-restless.readthedocs.io/en/stable/basicusage.html">Flask-restless API blueprints</a>: one for <strong>Book</strong> and one for <strong>Author</strong>, which when instantiated, construct the CRUD endpoints for each respective model.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">manager</span>
<span class="kn">from</span> <span class="nn">automagic_api.models</span>\
    <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">author_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>
<span class="n">book_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Book</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>

</code></pre>
</div>

<h4 id="your-directory-should-now-look-like">Your directory should now look like:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="create-initpy-in-our-flask-project">Create __init__.py in our Flask-project</h4>

<p>Create the file in <strong>‘automagic_api/automagic_api/’</strong>. This file will import our <strong>models.py</strong>, our <strong>controllers.py</strong> and instantiate our API.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">flask</span>
<span class="kn">import</span> <span class="nn">flask_restless</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">sessionmaker</span><span class="p">,</span> <span class="n">scoped_session</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">flask</span><span class="o">.</span><span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c"># Create our SQLAlchemy DB engine</span>
<span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">'sqlite:///foobar.db'</span><span class="p">)</span>
<span class="n">Session</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">,</span> <span class="n">autocommit</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">autoflush</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">scoped_session</span><span class="p">(</span><span class="n">Session</span><span class="p">)</span>

<span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>
<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">bind</span> <span class="o">=</span> <span class="n">engine</span>

<span class="c"># Import all models to add them to Base.metadata</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">()</span>

<span class="n">manager</span> <span class="o">=</span> <span class="n">flask_restless</span><span class="o">.</span><span class="n">APIManager</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="n">s</span><span class="p">)</span>
<span class="c"># Register flask-restless blueprints to instantiate CRUD endpoints</span>
<span class="kn">from</span> <span class="nn">controllers</span> <span class="kn">import</span> <span class="n">book_api_blueprint</span><span class="p">,</span> <span class="n">author_api_blueprint</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">author_api_blueprint</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">book_api_blueprint</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="create-runpy">Create run.py</h4>

<p>Create <strong>run.py</strong> in our root directory</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">'0.0.0.0'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="your-final-directory-structure-should-look-as-follows">Your final directory structure should look as follows:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   run.py
   automagic_api/
       __init__.py
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="start-and-test-your-api">Start and test your API!</h4>

<p>In the project root, start the server</p>

<div class="highlighter-rouge"><pre class="highlight"><code>env/bin/python run.py
</code></pre>
</div>

<p>In a python CLI, create a POST request to create a new <strong>Book</strong>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s">'title'</span><span class="p">:</span> <span class="s">"The Eye of the World"</span><span class="p">,</span>
    <span class="s">'author'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'first_name'</span><span class="p">:</span> <span class="s">"Robert"</span><span class="p">,</span>
        <span class="s">'last_name'</span><span class="p">:</span> <span class="s">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s">'is_available'</span><span class="p">:</span> <span class="bp">True</span>
<span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">'content-type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">"http://localhost:5000/api/book"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">),</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
<span class="mi">201</span>
</code></pre>
</div>

<p>Go ahead and open up a web browser, and navigate to <a href="http://localhost:5000/api/book">http://localhost:5000/api/book</a> to see the <em>Book</em> object that you just POSTed to your sqlite database.</p>

<p>Likewise, you can invert this request and check out <a href="http://localhost:5000/api/author">http://localhost:5000/api/author</a> to see the <em>Author</em> object that was created, and the nested <em>“books”</em> attribute that the author has written.</p>

<ul>
  <li><em><strong>Note</strong>: URLs for the API are constructed based off of the <strong>__tablename__</strong> of the sqlalchemy model, and are prefixed with “/api” (i.e Book -&gt; “/api/book”)</em></li>
</ul>

<p>Congratulations, you now have a working boilerplate for a SQLAlchemy-model defined REST API. Now go ahead and add more models and endpoints!</p>

<h4 id="final-remarks">Final Remarks</h4>

<p>The reason that I use Flask-restless for day-to-day APIs is it’s abstraction.</p>

<ol>
  <li>It preserves abstraction between the database’s relational model, and the JSON schema expected as input and output to the API</li>
  <li>It preserves abstraction between SQLAlchemy, and the SQL dialect under-the-hood.</li>
</ol>

<p>For instance, when I POST the following payload from a client application, I don’t care about the relational model between an <strong>Author</strong> and a <strong>Book</strong>, I just care that the JSON <strong>Book</strong> object contains a nested <strong>Author</strong> in its schema. By providing the nested <strong>Author</strong> object <em>WITHOUT</em> an <strong>id</strong> field, I implicitly CREATE this Author in the database.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'first_name'</span><span class="err">:</span> <span class="s2">"Robert"</span><span class="p">,</span>
        <span class="s1">'last_name'</span><span class="err">:</span> <span class="s2">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Conversely, if I would like to create a book that references a pre-existing author, I would changed my nested <strong>Author</strong> object to contain the <strong>id</strong> of the <strong>Author</strong> who wrote it.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
         <span class="s1">'id'</span><span class="err">:</span> <span class="mi">1</span>   
     <span class="p">},</span>
     <span class="c1">// or, we could break abstraction and assign an 'author_id':</span>
     <span class="c1">// 'author_id': 1,</span>
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Regarding preservation of SQLAlchemy’s level of abstraction, Flask-restless goes as far as to implement SQLAlchemy’s <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html">Query API</a> at the REST API level. Take the following example:</p>

<p>If Robert Jordan wrote 14 books (which he did in a painstakingly long series), and I only wanted to grab all books that Robert Jordan penned which are <strong>available</strong> in the library I could run the following query:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>http://localhost:5000/api/book?q={"filters":[{"name":"is_available","op":"==","val":true},{"name":"author_id","op":"==","val":1}]}
</code></pre>
</div>

<p>This would return our targeted books, and translates to running the following in SQLAlchemy:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">author_id</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> 
    <span class="n">Book</span><span class="o">.</span><span class="n">is_available</span> <span class="o">==</span> <span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre>
</div>

<ul>
  <li>The searchformat API also implements <em>order_by</em>, <em>limit</em>, <em>offset</em> and <em>group_by</em>. <br /><a href="http://flask-restless.readthedocs.io/en/stable/searchformat.html">See Flask-restless searchformat</a></li>
</ul>

<p>These 2 key features make this tool perfect for Single-Page Applications that need to communicate with an API server.</p>

<p><em>A huge thanks to the brilliant developers of Flask, Flask-restless and SQLAlchemy. I am but a humble messenger spreading the work of others…</em></p>


	  ]]></description>
	</item>


</channel>
</rss>
