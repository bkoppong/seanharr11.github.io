<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>thelaziestprogrammer.com</title>
   
   <link>http://thelaziestprogrammer.com</link>
   <description>Because someone else has already solved your problem.</description>
   <language>en-uk</language>
   <managingEditor> Sean Harrington</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Upgrading to Flask-restless v1.0.0 (Part I)</title>
	  <link>/sharrington/web-development/upgrading-to-flask-restless-v1.0.0-part-1</link>
	  <author>Sean Harrington</author>
	  <pubDate>2017-03-25T04:36:00-04:00</pubDate>
	  <guid>/sharrington/web-development/upgrading-to-flask-restless-v1.0.0-part-1</guid>
	  <description><![CDATA[
	     <p><br />
<strong>Flask-restless</strong> is a Flask extension providing generation of REST APIs from SQLAlchemy-defined database models. <a href="https://flask-restless.readthedocs.io/en/latest/">Flask-restless v1.0.0</a> introduces adoption of the <a href="http://www.jsonapi.org">jsonapi.org</a> spec, providing  additional features, consistent and strict HTTP Method contracts, at the expense of inherent breaking changes.</p>

<p>This article walks through the most basic of breaking changes found while upgrading from <strong>Flask-restless v0.17</strong> to <strong>Flask-restless v1.0.0</strong>.</p>

<h3 id="flask-app-and-models">Flask App and Models</h3>

<p>For purposes of this walkthrough, we assume a basic understanding of SQLAlchemy, and Flask. We define our Flask app in the following file:</p>

<div class="row">
<div class="col-md-8 col-md-offset-2 highlighter codetight">
<pre class="highlight">
<code class="python">
from flask import Flask
import flask_restless
import flask_sqlalchemy
import simplejson as json

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/flask_restless.db'
db = flask_sqlalchemy.SQLAlchemy(app)


class ProgrammingLanguage(db.Model):
    __tablename__ = "programming_languages"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, unique=True)
    latest_release = db.Column(db.String)

db.create_all()
# Create the Flask-Restless API manager.
manager = flask_restless.APIManager(app, flask_sqlalchemy_db=db)
manager.create_api(ProgrammingLanguage, methods=['GET', 'POST', 'PATCH', 'DELETE'])

if __name__ == "__main__":
    # Start the server with 'python \&lt;name_of_this_file.py\&gt;'
    app.run()

</code></pre><br /></div></div>

<h2 id="posting-a-row">POSTing a row</h2>

<p>Throughout the walkthrough, we will compare code samples of requests and responses between Flask-restless v0.17 (left), and v1.0.0 (right).</p>

<p>More specifically, we highlight the <em>updates required to get your code working with v1.0.0</em>.  We start with some basic legacy v0.17 code to POST a <code class="highlighter-rouge">programming_language</code> <a href="http://jsonapi.org/format/#document-resource-objects">Resource Object</a> to our database.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"Python"</span><span class="p">,</span>
    <span class="s">"latest_release"</span><span class="p">:</span> <span class="s">"3.6.0"</span>
<span class="p">}</span>
<span class="n">url</span> <span class="o">=</span> <span class="s">"http://localhost:5000/api/programming_languages"</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">"Content-Type"</span><span class="p">:</span> <span class="s">"application/json"</span><span class="p">}</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">simplejson</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="update-1-content-type-header">Update #1: Content-Type Header</h4>

<p>The response content that we receive varies dramatically between Flask-restless v0.17 (left) and v1.0.0 (right).</p>

<div class="row">
<div class="col-md-4 highlighter codetight">
<pre class="highlight">
<code class="python">
# Flask v0.17 Response
&gt;&gt;&gt; resp.status_code
201
&gt;&gt;&gt; resp.content
{
    "id": 1,
    "name": "Python",
    "latest_release": "3.6.0" 
}</code></pre></div>
  <div class="col-md-8 highlighter codetight">
    <pre class="highlight">
<code class="python">
# Flask v1.0.0 Response
&gt;&gt;&gt; resp.status_code
415
&gt;&gt;&gt; resp.content
{
    "errors": [
        {
            "code": null,
            "detail": "Request must have \"Content-Type: application/vnd.api+json\" header",
            "id": null,
            "links": null,
            "meta": null,
            "source": null,
            "status": 415,
            "title": null
        }
    ],
    "jsonapi": {
        "version": "1.0"
    }
}</code></pre>
  </div>
</div>

<p>Quite clearly, we see that we did not set the <code class="highlighter-rouge">Content-Type</code> header according to the <a href="http://jsonapi.org/format/#content-negotiation-clients">jsonapi.org spec</a>, so we get a <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16">415 - Unsupported Media Type</a> status.</p>

<p>Let’s set the header to <strong>application/vnd.api+json</strong> below and continue…</p>

<h4 id="update-2-json-wrapped-with-top-level-data-key">Update #2: JSON wrapped with top-level “data” key</h4>
<div class="row">
<div class="col-md-7 highlighter codetight">
<pre class="highlight">
<code class="python">
data = {
    "name": "Python",
    "latest_release": "3.6.0"
}
url = "http://localhost:5000/api/programming_languages"
headers = {"Content-Type": "application/vnd.api+json"}

resp = requests.post(url, simplejson.dumps(data), headers=headers)

&gt;&gt;&gt; resp.status_code
400
&gt;&gt;&gt; resp.content
{
    "errors": [
        {
            "code": null,
            "detail": "Failed to deserialize object: missing \"data\" element",
            "id": null,
            "links": null,
            "meta": null,
            "source": null,
            "status": 400,
            "title": null
        }
    ],
    "jsonapi": {
        "version": "1.0"
    }
}
</code>
</pre>
</div>
<div class="col-md-5">
    <p>This time we see a <a target="_blank" href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1">400 - Bad Request</a> status, which generally means that our JSON payload could not be understood by the server.  Specifically, the error states:</p>
    <p><em>"Failed to deserialize object: missing \"data\" element"</em></p>
    <p>The JSON API spec expects any POST payload to be delivered with its top-level schema of the form <strong>{"data": {....}},</strong> so let's update our payload as follows and try again.</p>
</div>
</div>

<h4 id="update-3-provide-the-type-of-our-posted-object">Update #3: Provide the “type” of our POSTed object</h4>
<div class="row">
<div class="col-md-7 highlighter codetight">
<pre class="highlight">
<code class="python">
data = {
    "name": "Python",
    "latest_release": "3.6.0"
}
url = "http://localhost:5000/api/programming_languages"
headers = {"Content-Type": "application/vnd.api+json")

resp = requests.post(url, simplejson.dumps({"data": programming_language_obj}), headers=headers)

&gt;&gt;&gt; resp.status_code
400
&gt;&gt;&gt; resp.content
{
    "errors": [
        {
            "code": null,
            "detail": "Failed to deserialize object: missing \"type\" element",
            "id": null,
            "links": null,
            "meta": null,
            "source": null,
            "status": 400,
            "title": null
        }
    ],
    "jsonapi": {
        "version": "1.0"
    }
}
</code>
</pre>
</div>
<div class="col-md-5">
<p>Again, we get a 400 status, with the server telling us:</p>
<p><em>"Failed to deserialize object: missing \"type\" element"</em></p>
<p>The <a target="_blank" href="http://jsonapi.org/format/#crud-creating">JSON API spec requires us to provide the <strong>type</strong> of resource that we are creating</a> with our POST request.</p>
<p>In this case, we are posting to the <strong>programming_languages</strong> table, so let's update our query accordingly...</p>

</div>
</div>

<h4 id="update-4-provide-attributes-of-our-posted-object">Update #4: Provide “attributes” of our POSTed object</h4>

<div class="row">
<div class="col-md-7 highlighter codetight">
<pre class="highlight">
<code class="python">
data = {
    "name": "Python", 
    "latest_release": "3.6.0"
    "type": "programming_languages"
}
url = "http://localhost:5000/api/programming_languages"
headers = {"Content-Type": "application/vnd.api+json"}

resp = requests.post(url, simplejson.dumps({"data": data}), headers=headers)

&gt;&gt;&gt; resp.status_code
201
&gt;&gt;&gt; resp.content
{
    "data": {
        "attributes": {
            "name": null,
            "latest_release" null
        },
        "id": "1",
        "links": {
            "self": "http://localhost:5001/api/programming_languages/1"
        },
        "relationships": {},
        "type": "programming_languages"
    },
    "included": [],
    "jsonapi": {
        "version": "1.0"
    },
    "links": {},
    "meta": {}
}
</code>
</pre>
</div>

<div class="col-md-5">
<p>Ahhh, finally a <code>201 - Created</code> status code...<strong>wait a minute</strong>...if we access <code>resp.content['attributes']['name']</code> we see that it has a value of <code>null</code>.</p>
<p>But we created our object with <code>{"name": "Python"}</code>, what happened?</p>
<p>The JSON API spec ignores our top-level <code>name</code> parameter - it is looking for the <code>attributes</code> top-level key to determine the attribute values (column values) of our new <code>programming_language</code> resource object.</p>
<p>Let's update our JSON payload one more time, and take a look at the full diff between v0.17 and v1.0.0</p>
</div>
</div>

<h4 id="post-request---full-comparison">POST Request - Full Comparison</h4>

<div class="row">

<div class="col-md-6 highlighter codetight">
<pre class="highlight">
<code class="python">
# Flask-restless v0.17 POST request
data = {
    "name": "Python",
    "latest_release": "3.6.0"
}
url = "http://localhost:5000/api/programming_languages"
headers = {"Content-Type": "application/json"}

resp = requests.post(url, simplejson.dumps(data), headers=headers)
# Viewing the response of the request
&gt;&gt;&gt; resp.status_code
201
&gt;&gt;&gt; resp.content
{
    "id": 1,
    "name": "Python",
    "latest_release": "3.6.0"
}</code></pre>
<p> There are several fields in our <code>resp.content</code> payload that we have not yet mentioned.</p>

<p>Most notable, is the <code>relationships</code> field nested within the Resource Object (<code>data</code> object). This walkthrough does not cover relationships, but these can be <a href="http://jsonapi.org/format/#fetching-relationships" target="_blank">read about here.</a></p>

<p>You should expect a follow up post covering these more advanced use cases of Flask-restless.</p>
</div>

<div class="col-md-6 highlighter codetight">
<pre class="highlight">
<code class="python">
# Flask-restles v1.0.0 POST request
data = {
    "type": "programming_languages",
    "attributes": {
        "name": "Python",
        "latest_release": "3.6.0"
    }
}
url = "http://localhost:5000/api/programming_languages"
headers = {"Content-Type": "application/vnd.api+json"})

resp = requests.patch(url, simplejson.dumps({"data": data}),
                      headers=headers)
# Viewing the response
&gt;&gt;&gt; resp.status_code
201
&gt;&gt;&gt; resp.content
{
    "data": {
        "attributes": {
            "name": "Python",
            "latest_release": "3.6.0"
        },
        "id": "1",
        "links": {
            "self": "http://localhost:5001/api/programming_languages/1"
        },
        "relationships": {}
        "type": "programming_languages"
    },
    "included": [],
    "jsonapi": {
        "version": "1.0"
    },
    "links": {},
    "meta": {}
}
</code>
</pre>
</div>
</div>

<hr />

<h2 id="getting-all-rows">GETting all Rows</h2>

<p>Next, we will retrieve the resources that we recently POSTed to the database with a GET request</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://localhost:5000/api/programming_languages"</span><span class="p">)</span>
</code></pre>
</div>

<div class="row">
    <div class="col-md-4 codetight">
        <pre class="highlight"><code class="python">
# Flask-restless v0.17
&gt;&gt;&gt; resp.status_code
200
&gt;&gt;&gt; resp.content
{
    "num_results": 1,
    "objects": [
        {
            "id": 1,
            "name": "Python",
            "latest_release": "3.6.0"
        }
    ],
    "page": 1,
    "total_pages": 1
}
           </code>
        </pre>
    <br />
    <h5>Key differences</h5>
    <p>
     <ul>
       <li>Size of the resource collection is now givin in <code>resp.content["meta"]["total"]</code></li>
       <li>Objects in this collection are nested as a list via <code>resp.content['data']</code></li>
       <li>Pagination is handled via <code>resp.content["links"]</code></li>
     </ul>
    </p>
    <em><strong>Note</strong>: getting a specific record is still executed via <code>http://localhost:5000/api/programming_languages/1</code>, where 1 is the id of the record. The return format is equal to that of the POSTed data above</em>
     </div>
    <div class="col-md-8 codetight">
        <pre class="highlight"><code class="python">
# Flask-restless v1.0.0
&gt;&gt;&gt; resp.status_code
201
&gt;&gt;&gt; resp.content
{
    "data": [
        {
            "attributes": {
                "name": "Python",
                "latest_release": "3.6.0"
            },
            "id": "1",
            "links": {
                "self": "http://localhost:5001/api/programming_languages/1"
            },
            "relationships": {},
            "type": "programming_languages"
        }
    ],
    "included": [],
    "jsonapi": {
        "version": "1.0"
    },
    "links": {
        "first": "http://localhost:5001/api/programming_languages?page%5Bsize%5D=10&amp;page%5Bnumber%5D=1",
        "last": "http://localhost:5001/api/programming_languages?page%5Bsize%5D=10&amp;page%5Bnumber%5D=1",
        "next": null,
        "prev": null,
        "self": "/api/programming_languages"
    },
    "meta": {
        "total": 1
    }
}
           </code>
        </pre>
  </div>
</div>

<h2 id="patching-a-row">PATCHing a row</h2>

<p>We’ve succesfully created and fetched resources from our Flask-restless API - now let’s update our perviously inserted record with a PATCH request. Below is how we would carry this out with <strong>Flask-restless v0.17</strong>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c"># Legacy Flask-restless v0.17 code</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"latest_release"</span><span class="p">:</span> <span class="s">"3.6.1"</span>
<span class="p">}</span>
<span class="n">url</span> <span class="o">=</span> <span class="s">"http://localhost:5000/api/programming_languages/1"</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">"Content-Type"</span><span class="p">:</span> <span class="s">"application/json"</span><span class="p">}</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">simplejson</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</code></pre>
</div>

<p>…if you read the POST section above, you know that we’ve got some work to do. Let’s apply Updates <a href="#update-1-content-type-header">#1</a>, <a href="update-2-json-wrapped-with-top-level-data-key">#2</a>, <a href="update-3-provide-the-type-of-our-posted-object">#3</a>, and <a href="#update-4-provide-attributes-of-our-posted-object">#4</a> to our PATCH request below to try and get our code working with <strong>Flask-restless v1.0.0</strong>.</p>

<h4 id="update-5-supply-resource-id">Update #5: Supply Resource ID</h4>

<div class="row">
    <div class="col-md-7 codetight">
        <pre class="highlight"><code class="python">
data = {
    "type": "programming_languages",
    "attributes": {
        "latest_release": "3.6.1"
    }
}
url = "http://localhost:5000/api/programming_languages/1"
headers = {"Content-Type": "application/vnd.api+json"})

resp = requests.patch(url, simplejson.dumps({"data": data}), headers=headers)
# Print the response
&gt;&gt;&gt; resp.status_code
400
&gt;&gt;&gt; resp.content
{
    "errors": [
        {
            "code": null,
            "detail": "Missing resource ID",
            "id": null,
            "links": null,
            "meta": null,
            "source": null,
            "status": 400,
            "title": null
        }
    ],
    "jsonapi": {
        "version": "1.0"
    }
}</code>
        </pre>
  </div>
  <div class="col-md-5">
      <p>Although we've included the <code>id</code> of the resource we'd like to update in the URL, rather redundantly, the <a href="http://jsonapi.org/format/#crud-updating" target="_blank">JSON API spec for Updates</a> mandates that the "<em>resource object MUST contain <code>id</code> [and <code>type</code>] members</em>".</p>

      <p>Let's add the <code>id</code> field to our resource object (<em>the 'data' object in JSON payload</em>), and fire away...</p>
  </div>
</div>

<h4 id="update-6-resource-id-must-be-a-string">Update #6: Resource ID must be a String</h4>

<div class="row">
    <div class="col-md-8 codetight">
        <pre class="highlight"><code class="python">
data = {
    "type": "programming_languages",
    "id": 1,
    "attributes": {
        "latest_release": "3.6.1"
    }
}
url = "http://localhost:5000/api/programming_languages/1"
headers = {"Content-Type": "application/vnd.api+json"})

resp = requests.patch(url, simplejson.dumps({"data": data}), headers=headers)
# Print the response
&gt;&gt;&gt; resp.status_code
409
&gt;&gt;&gt; resp.content
{
    "errors": [
        {
            "code": null,
            "detail": "The \"id\" element of the resource object must be a JSON string: 1",
            "id": null,
            "links": null,
            "meta": null,
            "source": null,
            "status": 400,
            "title": null
        }
    ],
    "jsonapi": {
        "version": "1.0"
    }
}</code>
        </pre>
  </div>
  <div class="col-md-4">
      <p>Congratulations! You've captured the very elusive <code>409 - Conflict</code> Status Code!</p>
      <p>The spec for this JSON API status code is <a href="http://jsonapi.org/format/#crud-updating-responses-409" target="_blank">explained here</a>, but our specific issue is that our ID needs to be a string (so we can support string-based IDs).</p>
      <p>Let's change <code>"id": 1</code> to <code>"id": "1"</code> and carry on...</p>
  </div>
</div>

<h4 id="patch-request---final-comparison">PATCH Request - Final Comparison</h4>

<div class="row">
    <div class="col-md-6 codetight">
        <pre class="highlight"><code class="python">
# Flask-restless 0.17
data = {
    "latest_release": "3.6.1"
}
url = "http://localhost:5000/api/programming_languages/1"
headers={"Content-Type": "application/json"}

resp = requests.patch(url, simplejson.dumps(data), headers=headers)

# Print the response
&gt;&gt;&gt; resp.status_code    
200
&gt;&gt;&gt; resp.content
{
    "id": 1,
    "latest_release": "3.6.1",
    "name": "Python"
}</code></pre>
   </div>

    <div class="col-md-6 codetight">
        <pre class="highlight"><code class="python">
# Flask-restless v1.0.0
data = {
    "type": "programming_languages",
    "id": "1",
    "attributes": {
        "latest_release": "3.6.1"
    }
}
url = "http://localhost:5000/api/programming_languages/1"
headers={"Content-Type": "application/vnd.api+json"}

resp = requests.patch(url, simplejson.dumps({"data": data}), headers=headers)

# Print the response
&gt;&gt;&gt; resp.status_code
204
&gt;&gt;&gt; resp.content
b''
</code>
        </pre>
  </div>
</div>

<p>Success: We see our <code>204 - No Content</code> status code, and we expect no content to be returned from this method.</p>

<h2 id="deleteing-a-row">DELETEing a Row</h2>

<p>Good news - the request and responses are identical for the DELETE HTTP Method:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s">"http://localhost:5000/api/programming_languages/1"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span>
<span class="mi">204</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">resp</span><span class="o">.</span><span class="n">content</span>
<span class="n">b</span><span class="s">''</span>
</code></pre>
</div>

<h2 id="conclusion">Conclusion</h2>

<p>That wraps up our walkthrough on how to upgrade from <strong>Flask-restless v0.17</strong> to <strong>Flask-restless v1.0.0</strong>.</p>

<p>This only scratches the surface on great new features (and breaking changes) of Flask-restless v1.0.0. Stay tuned for Part II where we will take a look at Resource Object Relationships, and how we make queries that handle Many-to-one, One-to-Many, and One-to-one relationships.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Tweet Harvester w/ Flask & Tweepy (Part 1)</title>
	  <link>/sharrington/web-development/tweet-archiver-with-flask-and-tweepy-part-1</link>
	  <author>Sean Harrington</author>
	  <pubDate>2017-02-10T20:15:03-05:00</pubDate>
	  <guid>/sharrington/web-development/tweet-archiver-with-flask-and-tweepy-part-1</guid>
	  <description><![CDATA[
	     <h4 id="intro">Intro</h4>
<p>Flask is a versatile microframework capable of doing just about anything that you ask of it. Flask ships with <strong>Jinja2</strong> as its HTML Templating Engine, and when combined with <strong>SQLAlchemy</strong>, provides full-stack development support that rivals bulkier framework (like Django).</p>

<p>All that said, I believe Flask’s best characteristic to be its ‘microframework’ status: there are <a href="http://flask.pocoo.org/extensions/">many add-ons and extensions</a> which can be utilized “a la carte”, rather than “out of the box”. This means multiple solutions to single problems, which almost always leads to better solutions in the open-source community. The “slim” nature of the framework also makes bootstrapping projects easier, with much less boilerplate code &amp; dogmatic “best-practices”.</p>

<p>In the first step, we will use <strong>Tweepy</strong>, and Flask’s core to build a quick dashboard to view a user’s Twitter Activity. In Part II, we will explore <strong>SQLAlchemy</strong> and <strong>Flask-restless</strong> to create an API to harvest &amp; archive Tweets in a database.</p>

<p><em>I will be using Python 3.6 (faster dictionaries, default utf-8 strings, etc.), but feel free to follow along with any flavor of Python (some people don’t like to let go…)</em></p>

<h3 id="setup-our-workspace">Setup our workspace</h3>

<p><strong>Important:</strong> <em>If you don’t know what a Python virtual environment is, <a href="https://packaging.python.org/installing/#creating-virtual-environments">read about them here</a> before continuing!</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>mkdir tweet-harvester
<span class="nb">cd </span>tweet_harvester
python -m venv env
<span class="c"># Or 'virtualenv env' to start a NEW project with OLD tools</span>
<span class="nb">source </span>env/bin/activate
mkdir tweet_harvester
touch tweet_harvester/__init__.py run.py config.py
</code></pre>
</div>

<p>Your directory structure should look like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>tweet_harvester/
    tweet_harvester/
        __init__.py
    run.py
    config.py
    env/
</code></pre>
</div>

<h3 id="install-dependencies-with-pip">Install dependencies with pip</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>pip install flask tweepy flask-restless
</code></pre>
</div>

<h3 id="hello-world-from-flask">Hello World from Flask</h3>

<ol>
  <li>Open up the <code class="highlighter-rouge">__init__.py</code> file created in step (1), entering the following content:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="c"># Instantiate our app...</span>
<span class="c"># Name it the '__name__' of this module (tweet-harvest)</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c"># Later, we will store our Twitter tokens/keys</span>
<span class="c"># in config.py...we load our config here.</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="s">'config'</span><span class="p">)</span>

<span class="c"># We define our URL route, and the controller to handle requests</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>
</code></pre>
</div>

<ol start="2">
  <li>Next open the <code class="highlighter-rouge">run.py</code> file created earlier, inserting the following content:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">tweet_harvester</span> <span class="kn">import</span> <span class="n">app</span>
<span class="c"># 'app' originates from the line 'app = Flask(__name__)'</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span>
</code></pre>
</div>

<ol start="3">
  <li>Finally, start the server</li>
</ol>

<p><strong>Important:</strong> <em>The Flask development server should <strong>never</strong> be used in Production environments, nor should <code class="highlighter-rouge">app.config['DEBUG'] == True</code> in Production. In Production, you’d want to wrap your Flask application with a WSGI server, like <a href="http://gunicorn.org/">Gunicorn</a></em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>python run.py
</code></pre>
</div>
<p>…and open up your web browser to <a href="http://localhost:8080">http://localhost:8080/</a>, and verify our Hello World test.</p>

<p>Hello World with Flask is <strong>easy</strong>. Setting up and configuring a project is often one of the most difficult tasks when developing on the full-stack, as you only do it a handful of times each year (<em>think about it!</em>). Flask (<em>and Python</em>) make this hurdle an easy one to leap.</p>

<h3 id="create-a-new-twitter-application-tokens-and-keys">Create a new Twitter Application, Tokens and Keys</h3>

<ol>
  <li>Navigate to <a href="https://apps.twitter.com">https://apps.twitter.com</a>, and sign in with existing Twitter credentials, or make a new account.</li>
  <li>Click <strong>Create New App</strong> ( or just click <a href="https://apps.twitter.com/app/new">here</a> )</li>
  <li>Enter a <strong>Name</strong>, a <strong>Description</strong>, and for <strong>Website</strong> enter <em>http://foobar.com</em> (as this does not matter for the time being). Leave the <strong>Callback URL</strong> blank. Accept the developer terms, and click <strong>Create your Twitter application</strong>. <img src="/assets/images/twitter_new_application.png" alt="New Twitter Application" /></li>
  <li>On the resulting screen after app creation, navigate to the <strong>Keys and Access Tokens</strong> tab. Scroll down to <strong>Your Access Token</strong>, and click the <strong>Create my access token</strong> button. <img src="/assets/images/twitter_tokens_keys_and_secrets.jpg" alt="Twitter Access Tokens" /></li>
  <li>Once these tokens generate (should take a second or 2), you’ll want to use them in the next step.</li>
</ol>

<h3 id="deploy-our-twitter-activity-dashboard">Deploy our Twitter Activity Dashboard</h3>

<ol>
  <li>Create Twitter Environment Variables in <code class="highlighter-rouge">~/.bash_profile</code>.</li>
</ol>

<p><em>This file gets loaded every time your user account starts a new shell. For system-wide variables, enter data into <code class="highlighter-rouge">/etc/profile</code>.</em></p>

<p><em>Your <code class="highlighter-rouge">~/.bash_profile</code> <strong>or</strong> <code class="highlighter-rouge">/etc/profile</code> should contain:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>EXPORT <span class="nv">TWITTER_CONSUMER_KEY</span><span class="o">=</span>your_consumer_key_here
EXPORT <span class="nv">TWITTER_CONSUMER_SECRET</span><span class="o">=</span>your_consumer_secret_here
EXPORT <span class="nv">TWITTER_ACCESS_TOKEN</span><span class="o">=</span>your_access_token_here
EXPORT <span class="nv">TWITTER_ACCESS_TOKEN_SECRET</span><span class="o">=</span>your_access_token_secret_here
</code></pre>
</div>

<p><strong>IMPORTANT!</strong> After saving this file, run the following command to load your new ENV variables:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nb">source</span> ~/.bash_profile
<span class="c"># or "source /etc/profile"</span>
</code></pre>
</div>

<ol start="2">
  <li>Load these Environment Variables into <code class="highlighter-rouge">config.py</code>:</li>
</ol>

<p><em>We want to load these from our Environment, rather than pasting the codes directly into <code class="highlighter-rouge">config.py</code> for obvious security reasons.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span> 
<span class="c"># Enable stacktrace &amp; debugger in web browser</span>
<span class="n">TWITTER_CONSUMER_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_KEY'</span><span class="p">]</span>
<span class="n">TWITTER_CONSUMER_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_SECRET'</span><span class="p">]</span>
<span class="n">TWITTER_ACCESS_TOKEN</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN'</span><span class="p">]</span>
<span class="n">TWITTER_ACCESS_TOKEN_SECRET</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN_SECRET'</span><span class="p">]</span>
</code></pre>
</div>

<ol start="3">
  <li>Update <code class="highlighter-rouge">__init__.py</code> by adding Twitter authentication</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">import</span> <span class="nn">tweepy</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="c"># Load our config from an object, or module (config.py)</span>
<span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">from_object</span><span class="p">(</span><span class="s">'config'</span><span class="p">)</span>

<span class="c"># These config variables come from 'config.py'</span>
<span class="n">auth</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">OAuthHandler</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_KEY'</span><span class="p">],</span>
                           <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_CONSUMER_SECRET'</span><span class="p">])</span>
<span class="n">auth</span><span class="o">.</span><span class="n">set_access_token</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN'</span><span class="p">],</span>
                      <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s">'TWITTER_ACCESS_TOKEN_SECRET'</span><span class="p">])</span>
<span class="n">tweepy_api</span> <span class="o">=</span> <span class="n">tweepy</span><span class="o">.</span><span class="n">API</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>
</code></pre>
</div>

<ol start="4">
  <li>Define our <code class="highlighter-rouge">get_tweets()</code> function in <code class="highlighter-rouge">__init__.py</code></li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="n">tweets</span> <span class="o">=</span> <span class="n">tweepy_api</span><span class="o">.</span><span class="n">user_timeline</span><span class="p">(</span><span class="n">screen_name</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>                                                                            
    <span class="k">return</span> <span class="p">[{</span><span class="s">'tweet'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="p">,</span>
              <span class="s">'created_at'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">created_at</span><span class="p">,</span> 
              <span class="s">'username'</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
              <span class="s">'headshot_url'</span><span class="p">:</span> <span class="n">t</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">}</span>
           <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tweets</span><span class="p">]</span>
</code></pre>
</div>

<ol start="5">
  <li>Create <code class="highlighter-rouge">templates/</code> and <code class="highlighter-rouge">tweets.html</code></li>
</ol>

<p><em>This HTML file will render the data obtained in the <code class="highlighter-rouge">get_tweets()</code> function above. Note that we load Bootstrap 4 (alpha-release) from maxcdn.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">&lt;!-- templates/tweets.html --&gt;</span>  
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1, shrink-to-fit=no"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;title&gt;</span>Tweet Harvester<span class="nt">&lt;/title&gt;</span>

    <span class="c">&lt;!-- Bootstrap 4 Stuff https://v4-alpha.getbootstrap.com/  --&gt;</span> 
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span>
          <span class="na">href=</span><span class="s">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"</span>
          <span class="na">integrity=</span><span class="s">"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ"</span>
          <span class="na">crossorigin=</span><span class="s">"anonymous"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- End Bootstrap 4 stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"p-3"</span><span class="nt">&gt;</span>Tweet Harvester<span class="nt">&lt;/h1&gt;</span>
      {% for tweet in tweets %}
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">class=</span><span class="s">"list-group-item list-group-item-action flex-column align-items-start"</span><span class="nt">&gt;</span>
           <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"d-flex w-100 justify-content-between"</span><span class="nt">&gt;</span>
             <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"{{tweet.headshot_url}}"</span> <span class="na">class=</span><span class="s">"w-12 p-1 float-left image-thumbnail"</span><span class="nt">&gt;</span>  
             <span class="nt">&lt;h5</span> <span class="na">class=</span><span class="s">"ml-10 w-75 mb-1"</span><span class="nt">&gt;</span>{{ tweet.tweet }}<span class="nt">&lt;/h5&gt;</span>
             <span class="nt">&lt;small&gt;</span>{{ tweet.created_at }}<span class="nt">&lt;/small&gt;</span>
           <span class="nt">&lt;/div&gt;</span>
         <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      {% endfor %}
      
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre>
</div>

<p>Your directory structure should look like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>tweet_harvester/
    tweet_harvester/
        __init__.py
        templates/
            tweets.html
    run.py
    config.py
    env/
</code></pre>
</div>

<ol start="6">
  <li>Add <strong>route</strong> and <strong>controller</strong> to <code class="highlighter-rouge">__init__.py</code> to render this template</li>
</ol>

<p><em>We get the <code class="highlighter-rouge">username</code> parameter below directly from the URL with the <code class="highlighter-rouge">/&lt;string:username&gt;</code> segment of our route’s URL. We then pass it to the <code class="highlighter-rouge">tweets(username)</code> function.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/tweet-harvester/&lt;string:username&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">tweets</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
  <span class="c"># 'tweets' is passed as a keyword-arg (**kwargs)</span>
  <span class="c"># **kwargs are bound to the 'tweets.html' Jinja Template context</span>
  <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">"tweets.html"</span><span class="p">,</span> <span class="n">tweets</span><span class="o">=</span><span class="n">get_tweets</span><span class="p">(</span><span class="n">username</span><span class="p">))</span>
</code></pre>
</div>
<p><em>Flask leverages the Jinja2 Templating Engine. In our Flask controller, we return with:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">var1</span><span class="o">=</span><span class="n">obj1</span><span class="p">,</span> <span class="n">var2</span><span class="o">=</span><span class="n">obj2</span><span class="p">,</span> <span class="n">varN</span><span class="o">=</span><span class="n">objN</span><span class="p">)</span>
</code></pre>
</div>

<p><em>…with an infinite number of <code class="highlighter-rouge">var=obj</code> bindings. These bindings are <a href="http://stackoverflow.com/questions/1769403/understanding-kwargs-in-python">passed via <strong>**kwargs</strong></a> to create the template’s <strong>context</strong>. This Jinja <strong>context</strong> is available anywhere within a Jinja <strong>block</strong>, where we can embed Python to modify/render values.</em></p>

<p><em>An <strong>example Jinja for-loop block</strong> is as follows:</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code>
<span class="nt">&lt;ul&gt;</span>
  {% for elem in var1 %}
  <span class="nt">&lt;li&gt;</span>{{elem}}<span class="nt">&lt;/li&gt;</span>
  {% endfor %} )
<span class="nt">&lt;/ul&gt;</span>

</code></pre>
</div>
<p><em>…which would render a list-item <strong>&lt;li&gt;</strong> for each <strong>elem</strong> in the <strong>list</strong> bound to <strong>var1</strong>.</em></p>

<ol start="6">
  <li>Start your server, and test with any Twitter handle</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code>python run.py
</code></pre>
</div>
<p><em>Navigate to <a href="http://localhost:8080/tweet-harvester/realDonaldTrump#">http://localhost:8080/tweet-harvester/realDonaldTrump</a> to test!</em></p>

<hr />

<h4 id="part-i-complete">Part I Complete!</h4>

<p>You’ve succesfully deployed a simple Twitter Activity dashboard, and have gotten your hands dirty with some of Flask’s core features and concepts, namely:</p>

<ol>
  <li>Jinja2</li>
  <li>Flask Routes &amp; Controllers (Views)</li>
  <li>Flask Project Structure</li>
  <li>Starting the Flask Development Server</li>
</ol>

<p>Our next step will be to define a SQLAlchemy model for a <strong>Tweet</strong>, and automagically generate CRUD endpoints based off of this model with <strong>Flask-restless</strong>. This will enable us to archive tweets, from our Activity Dashboard to a local SQLite database.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Connecting to SQL Server from SQLAlchemy on a Mac</title>
	  <link>/sharrington/databases/connecting-to-sql-server-with-sqlalchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2017-01-03T00:05:00-05:00</pubDate>
	  <guid>/sharrington/databases/connecting-to-sql-server-with-sqlalchemy</guid>
	  <description><![CDATA[
	     <p><em>This post explains how to connect to SQL Server using SQLAlchemy, pyodbc, UnixODBC and FreeTDS on a Mac</em></p>

<h3>Install UnixODBC &amp; FreeTDS</h3>

<ol>
  <li>Install via Homebrew
    <div class="highlighter-rouge"><pre class="highlight"><code>brew install unixodbc
brew install freetds --with-unixodbc
</code></pre>
    </div>
  </li>
  <li>Test with FreeTDS from terminal
    <div class="highlighter-rouge"><pre class="highlight"><code>tsql -S <span class="o">[</span>IP or Hostname] -U <span class="o">[</span>username] -P <span class="o">[</span>password]
locale is <span class="s2">"en_US.UTF-8"</span>
locale charset is <span class="s2">"UTF-8"</span>
using default charset <span class="s2">"UTF-8"</span>
1&gt;
</code></pre>
    </div>
  </li>
</ol>

<h3>Configure odbc.ini &amp; odbcinst.ini</h3>

<ol>
  <li>Open /usr/local/etc/odbcinst.ini, point to the driver at libtdsodbc.so&lt;/h3&gt;
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>FreeTDS]
Driver <span class="o">=</span> /usr/local/lib/libtdsodbc.so
Setup <span class="o">=</span> /usr/local/lib/libtdsodbc.so
FileUsage <span class="o">=</span> 1
</code></pre>
    </div>
  </li>
  <li>Open /usr/local/etc/odbc.ini and create new DSN
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>MSSQL_DSN]
<span class="nv">Driver</span><span class="o">=</span>FreeTDS
<span class="nv">Server</span><span class="o">=</span>10.110.0.200
<span class="nv">Port</span><span class="o">=</span>1433
<span class="nv">Database</span><span class="o">=</span>my_database_name
</code></pre>
    </div>
  </li>
  <li>Test the DSN
    <div class="highlighter-rouge"><pre class="highlight"><code>isql MSSQL_DSN username password -v
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| <span class="nb">help</span> <span class="o">[</span>tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
<span class="gp">SQL&gt; </span>^D
</code></pre>
    </div>
  </li>
</ol>

<h3>Install pyodbc</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>pip install pyodbc
</code></pre>
</div>

<h3>Connect with sqlalchemy</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">"mssql+pyodbc://username:password@MSSQL_DSN"</span><span class="p">)</span>
</code></pre>
</div>

<p>Hopefully you can quickly get connected to your SQL Server instance via Python with the steps above. For me, it has been notoriously more difficult to connect to than other databases like MySQL and PostgreSQL. In fact, I built an open-sourced tool to migrate an entire database (or a handful of tables) from SQL Server, to any other RDBMS like MySQL.</p>

<p><a href="https://github.com/seanharr11/etlalchemy">Check out etlalchemy here on github</a></p>

<hr />

<h4>A couple of notes...</h4>

<ol>
  <li>Depending on the SQL Server version you are connecting to, you may need to specify a TDS Protocol Version in <em>/usr/local/etc/freetds.conf</em>:
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>global]
    <span class="c"># Uncomment below to guess protocol</span>
    <span class="c"># tds version = auto</span>
    tds version <span class="o">=</span> 7.3
</code></pre>
    </div>
  </li>
</ol>

<p><strong>Full Compatability Matrix</strong> (from <a href="http://www.freetds.org/userguide/choosingtdsprotocol.htm">http://freetds.org</a>)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Product</th>
      <th style="text-align: left">TDS Version</th>
      <th style="text-align: left">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Sybase before System 10, Microsoft SQL Server 6.x</td>
      <td style="text-align: left">4.2</td>
      <td style="text-align: left">Still works with all products, subject to its limitations.</td>
    </tr>
    <tr>
      <td style="text-align: left">Sybase System 10 and above</td>
      <td style="text-align: left">5.0</td>
      <td style="text-align: left">Still the most current protocol used by Sybase.</td>
    </tr>
    <tr>
      <td style="text-align: left">Sybase System SQL Anywhere</td>
      <td style="text-align: left">5.0 <em>only</em></td>
      <td style="text-align: left">Originally Watcom SQL Server, a completely separate codebase. Our best information is that SQL Anywhere first supported TDS in version 5.5.03 using the OpenServer Gateway (OSG), and native TDS 5.0 support arrived with version 6.0.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 7.0</td>
      <td style="text-align: left">7.0</td>
      <td style="text-align: left">Includes support for the extended datatypes in SQL Server 7.0 (such as char/varchar fields of more than 255 characters), and support for Unicode.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2000</td>
      <td style="text-align: left">7.1</td>
      <td style="text-align: left">Include support for bigint (64 bit integers), variant and collation on all fields. Collation is not widely used.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2005</td>
      <td style="text-align: left">7.2</td>
      <td style="text-align: left">Includes support for varchar(max), varbinary(max), xml datatypes and MARS[a].</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2008</td>
      <td style="text-align: left">7.3</td>
      <td style="text-align: left">Includes support for time, date, datetime2, datetimeoffset.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2012 or 2014</td>
      <td style="text-align: left">7.4</td>
      <td style="text-align: left">Includes support for session recovery.</td>
    </tr>
    <tr>
      <td style="text-align: left">N/A</td>
      <td style="text-align: left">8.0</td>
      <td style="text-align: left">FreeTDS will alias this version to 7.1 for backwards compatibility reasons, but this should be avoided due to future compatibility concerns. See note below on obsolete versions.</td>
    </tr>
  </tbody>
</table>


	  ]]></description>
	</item>

	<item>
	  <title>REST API with Flask-Restless and SQLAlchemy</title>
	  <link>/sharrington/web-development/sqlalchemy-defined-rest-api</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-08-19T02:32:00-04:00</pubDate>
	  <guid>/sharrington/web-development/sqlalchemy-defined-rest-api</guid>
	  <description><![CDATA[
	     <p>This post shows how to auto-generate a REST API from a handful of SQLAlchemy models. This means full CRUD <em>(POST, GET, PUT, DELETE)</em> endpoint generation for each SQLAlchemy model defined.</p>

<p>Let’s say our company is building a Single-Page Application for librarians &amp; readers that accomplishes the following 2 goals:</p>

<ol>
  <li>Show the availability and information of a given book to readers.</li>
  <li>Allow a librarian to perform CRUD operations to update their libary’s inventory.</li>
</ol>

<p>We’ve been tasked with building a REST API to allow a Single-Page Application to interface with our database.</p>

<h4 id="environment-setup">Environment Setup</h4>
<ol>
  <li>Create project root directory.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
</code></pre>
    </div>
  </li>
  <li>Create and activate virtualenv.
    <div class="highlighter-rouge"><pre class="highlight"><code>cd automagic_api;
virtualenv env;
source env/bin/activate
</code></pre>
    </div>
  </li>
  <li>Install flask-restless and sqlalchemy
    <div class="highlighter-rouge"><pre class="highlight"><code>pip install flask-restless sqlalchemy
</code></pre>
    </div>
  </li>
</ol>

<p>Your project directory tree should look as follows:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
env/
</code></pre>
</div>

<h4 id="further-compartmentalize-the-project-and-define-our-models">Further compartmentalize the project and define our models</h4>

<ol>
  <li>Create nested project directory ‘/automagic_api’ to hold Flask-specific files.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
cd automagic_api
</code></pre>
    </div>
  </li>
  <li>Create <strong>‘models.py’</strong> within the flask-project directory and define <strong>Book</strong> and <strong>Author</strong>..</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">ForeignKey</span><span class="p">,</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">Boolean</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">backref</span><span class="p">,</span> <span class="n">relationship</span>
<span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">Base</span>

<span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="c"># API endpoint will take the form '/api/__tablename__'</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">Book</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">title</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">author_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> 
        <span class="n">ForeignKey</span><span class="p">(</span><span class="s">"author.id"</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span> 
        <span class="n">backref</span><span class="o">=</span><span class="n">backref</span><span class="p">(</span><span class="s">'books'</span><span class="p">))</span>  
    <span class="n">is_available</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Boolean</span><span class="p">)</span>


</code></pre>
</div>

<p>Your directory structure should now look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
   env/
</code></pre>
</div>

<h4 id="create-controllerspy-to-define-endpoints">Create controllers.py to define endpoints</h4>

<p>Below we define our 2 <a href="http://flask-restless.readthedocs.io/en/stable/basicusage.html">Flask-restless API blueprints</a>: one for <strong>Book</strong> and one for <strong>Author</strong>, which when instantiated, construct the CRUD endpoints for each respective model.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">manager</span>
<span class="kn">from</span> <span class="nn">automagic_api.models</span>\
    <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">author_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>
<span class="n">book_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Book</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>

</code></pre>
</div>

<h4 id="your-directory-should-now-look-like">Your directory should now look like:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="create-initpy-in-our-flask-project">Create __init__.py in our Flask-project</h4>

<p>Create the file in <strong>‘automagic_api/automagic_api/’</strong>. This file will import our <strong>models.py</strong>, our <strong>controllers.py</strong> and instantiate our API.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">flask</span>
<span class="kn">import</span> <span class="nn">flask_restless</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">sessionmaker</span><span class="p">,</span> <span class="n">scoped_session</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">flask</span><span class="o">.</span><span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c"># Create our SQLAlchemy DB engine</span>
<span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">'sqlite:///foobar.db'</span><span class="p">)</span>
<span class="n">Session</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">,</span> <span class="n">autocommit</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">autoflush</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">scoped_session</span><span class="p">(</span><span class="n">Session</span><span class="p">)</span>

<span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>
<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">bind</span> <span class="o">=</span> <span class="n">engine</span>

<span class="c"># Import all models to add them to Base.metadata</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">()</span>

<span class="n">manager</span> <span class="o">=</span> <span class="n">flask_restless</span><span class="o">.</span><span class="n">APIManager</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="n">s</span><span class="p">)</span>
<span class="c"># Register flask-restless blueprints to instantiate CRUD endpoints</span>
<span class="kn">from</span> <span class="nn">controllers</span> <span class="kn">import</span> <span class="n">book_api_blueprint</span><span class="p">,</span> <span class="n">author_api_blueprint</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">author_api_blueprint</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">book_api_blueprint</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="create-runpy">Create run.py</h4>

<p>Create <strong>run.py</strong> in our root directory</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">'0.0.0.0'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="your-final-directory-structure-should-look-as-follows">Your final directory structure should look as follows:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   run.py
   automagic_api/
       __init__.py
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="start-and-test-your-api">Start and test your API!</h4>

<p>In the project root, start the server</p>

<div class="highlighter-rouge"><pre class="highlight"><code>env/bin/python run.py
</code></pre>
</div>

<p>In a python CLI, create a POST request to create a new <strong>Book</strong>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s">'title'</span><span class="p">:</span> <span class="s">"The Eye of the World"</span><span class="p">,</span>
    <span class="s">'author'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'first_name'</span><span class="p">:</span> <span class="s">"Robert"</span><span class="p">,</span>
        <span class="s">'last_name'</span><span class="p">:</span> <span class="s">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s">'is_available'</span><span class="p">:</span> <span class="bp">True</span>
<span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">'content-type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">"http://localhost:5000/api/book"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">),</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
<span class="mi">201</span>
</code></pre>
</div>

<p>Go ahead and open up a web browser, and navigate to <a href="http://localhost:5000/api/book">http://localhost:5000/api/book</a> to see the <em>Book</em> object that you just POSTed to your sqlite database.</p>

<p>Likewise, you can invert this request and check out <a href="http://localhost:5000/api/author">http://localhost:5000/api/author</a> to see the <em>Author</em> object that was created, and the nested <em>“books”</em> attribute that the author has written.</p>

<ul>
  <li><em><strong>Note</strong>: URLs for the API are constructed based off of the <strong>__tablename__</strong> of the sqlalchemy model, and are prefixed with “/api” (i.e Book -&gt; “/api/book”)</em></li>
</ul>

<p>Congratulations, you now have a working boilerplate for a SQLAlchemy-model defined REST API. Now go ahead and add more models and endpoints!</p>

<h4 id="final-remarks">Final Remarks</h4>

<p>The reason that I use Flask-restless for day-to-day APIs is it’s abstraction.</p>

<ol>
  <li>It preserves abstraction between the database’s relational model, and the JSON schema expected as input and output to the API</li>
  <li>It preserves abstraction between SQLAlchemy, and the SQL dialect under-the-hood.</li>
</ol>

<p>For instance, when I POST the following payload from a client application, I don’t care about the relational model between an <strong>Author</strong> and a <strong>Book</strong>, I just care that the JSON <strong>Book</strong> object contains a nested <strong>Author</strong> in its schema. By providing the nested <strong>Author</strong> object <em>WITHOUT</em> an <strong>id</strong> field, I implicitly CREATE this Author in the database.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'first_name'</span><span class="err">:</span> <span class="s2">"Robert"</span><span class="p">,</span>
        <span class="s1">'last_name'</span><span class="err">:</span> <span class="s2">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Conversely, if I would like to create a book that references a pre-existing author, I would changed my nested <strong>Author</strong> object to contain the <strong>id</strong> of the <strong>Author</strong> who wrote it.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
         <span class="s1">'id'</span><span class="err">:</span> <span class="mi">1</span>   
     <span class="p">},</span>
     <span class="c1">// or, we could break abstraction and assign an 'author_id':</span>
     <span class="c1">// 'author_id': 1,</span>
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Regarding preservation of SQLAlchemy’s level of abstraction, Flask-restless goes as far as to implement SQLAlchemy’s <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html">Query API</a> at the REST API level. Take the following example:</p>

<p>If Robert Jordan wrote 14 books (which he did in a painstakingly long series), and I only wanted to grab all books that Robert Jordan penned which are <strong>available</strong> in the library I could run the following query:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>http://localhost:5000/api/book?q={"filters":[{"name":"is_available","op":"==","val":true},{"name":"author_id","op":"==","val":1}]}
</code></pre>
</div>

<p>This would return our targeted books, and translates to running the following in SQLAlchemy:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">author_id</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> 
    <span class="n">Book</span><span class="o">.</span><span class="n">is_available</span> <span class="o">==</span> <span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre>
</div>

<ul>
  <li>The searchformat API also implements <em>order_by</em>, <em>limit</em>, <em>offset</em> and <em>group_by</em>. <br /><a href="http://flask-restless.readthedocs.io/en/stable/searchformat.html">See Flask-restless searchformat</a></li>
</ul>

<p>These 2 key features make this tool perfect for Single-Page Applications that need to communicate with an API server.</p>

<p><em>A huge thanks to the brilliant developers of Flask, Flask-restless and SQLAlchemy. I am but a humble messenger spreading the work of others…</em></p>


	  ]]></description>
	</item>

	<item>
	  <title>Installing cx_Oracle Driver on El Capitan</title>
	  <link>/sharrington/databases/oracle/install-cx_oracle-mac</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/oracle/install-cx_oracle-mac</guid>
	  <description><![CDATA[
	     <h5 id="download-oracle-instantclient">Download Oracle instantclient</h5>
<ol>
  <li>Navigate to the <a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">‘Oracle Instant Client Downloads’</a> page.</li>
  <li>Download <strong>instantclient-basic-macos.x64-12.1.0.2.0.zip</strong> and <strong>instantclient-sdk-macos.x64-12.1.0.2.0.zip</strong>
    <ul>
      <li>You will need an Oracle account to proceed with the download.</li>
    </ul>
  </li>
  <li>Enter the ‘~/Downloads’ folder in Terminal, and unzip both downloads:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads
<span class="c"># Or 'cd &lt;download_directory&gt;'</span>
unzip instantclient-basic-macos.x64-12.1.0.2.0.zip
<span class="c"># Running the below 'unzip' command will automagically </span>
<span class="c"># place the unzipped contents in 'instantclient_12_1/sdk'</span>
unzip instantclient-sdk-macos.x64-12.1.0.2.0.zip
</code></pre>
</div>

<h5 id="move-directory-and-link-libclntshdylib121">Move directory and link libclntsh.dylib.12.1</h5>

<div class="highlighter-rouge"><pre class="highlight"><code>mv instantclient_12_1 /usr/local/opt/instantclient_12_1
<span class="nb">cd</span> /usr/local/opt/instantclient_12_1
ln -s libclntsh.dylib.12.1 libclntsh.dylib
</code></pre>
</div>

<h5 id="configure-environment-variables">Configure environment variables</h5>

<div class="highlighter-rouge"><pre class="highlight"><code># Tell cx_Oracle setup.py where to find instantclient libs
export ORACLE_HOME=/usr/local/opt/instantclient_12_1
# Set -rpath option to tell gcc to look in ORACLE_HOME when linking
export FORCE_RPATH=1

</code></pre>
</div>

<h5 id="download-and-install-cxoracle">Download and install cx_Oracle</h5>

<div class="highlighter-rouge"><pre class="highlight"><code># Install with pip
pip install cx_Oracle
</code></pre>
</div>

<h5 id="verify-cxoracle-was-correctly-installed">Verify cx_Oracle was correctly installed</h5>

<div class="highlighter-rouge"><pre class="highlight"><code>python -c "import cx_Oracle"
</code></pre>
</div>

<p>If this fails then you may see the following exception:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: dlopen(/Library/Python/2.7/site-packages/cx_Oracle.so, 2): Library not loaded: @rpath/libclntsh.dylib.12.1
  Referenced from: /Library/Python/2.7/site-packages/cx_Oracle.so
  Reason: image not found
</code></pre>
</div>

<p>If you are seeing this exception, you either skipped setting <code class="highlighter-rouge">ORACLE_HOME</code> and <code class="highlighter-rouge">FORCE_RPATH</code> (as described above), or you are using a cached version of the cx_Oracle build when installing. To force pip to re-build the package, run:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>pip install --no-cache-dir --allow-external --allow-unverified cx_oracle
</code></pre>
</div>

<p><em>Thanks to <a href="http://stackoverflow.com/users/4799035/christopher-jones">Christopher Jones</a> for help simplifying the above steps.</em></p>


	  ]]></description>
	</item>

	<item>
	  <title>Migrating Between SQL Databases</title>
	  <link>/sharrington/databases/migrating-between-databases-with-etlalchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/migrating-between-databases-with-etlalchemy</guid>
	  <description><![CDATA[
	     <p><br />
We can all agree on one thing: SQL Databases are here to stay.</p>

<p>However, for one reason or another, sometimes they stay in one place for too long.</p>

<p style="text-align: center"><a href="#code-snippet">Jump to Code Snippet</a></p>

<p>I started my most recent job in June 2015, where I was responsible for projects spanning various fields, ranging from Web Development to Machine Learning. After learning that we kept the majority of our data in an <strong>Oracle 9i</strong> RDBMS, and learning that Oracle pulled support for the system in July 2010, naturally the first move to make was to migrate onto a different RDBMS, or to upgrade.</p>

<p>In short, we chose to migrate from Oracle onto MySQL as our target RDBMS. So began my journey to migrate off of a database as old as the sea turtle in the banner above, and onto a modern solution.</p>

<p>As most projects do, the project grew from a simple database migration, to a database migration requiring cleaning data, altering schema, identifying and dropping unused/legacy columns etc… We identified the following requirements when searching for a solution:</p>

<ol>
  <li><strong>No Loss of Information</strong>
    <ul>
      <li><em>Data, schema, constraints and indexes all must be migrated without any loss of information.</em></li>
    </ul>
  </li>
  <li><strong>Automated Solution</strong>
    <ul>
      <li><em>Avoid .sql scripts and manual scripting.</em></li>
      <li><em>‘Push-button’ solution, rather than several small procedures.</em></li>
    </ul>
  </li>
  <li><strong>High Degree of Customizability.</strong>
    <ul>
      <li><em>Adding custom rules for schema transformations.</em></li>
      <li><em>Adding custom rules for data transformations.</em></li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li><em>Fast enough to test multiple runs per day.</em></li>
    </ul>
  </li>
</ol>

<p>The immediate solutions failed:</p>

<ol>
  <li><strong>MySQL Workbench</strong> involved a great deal of manual configuring, and no ‘automated’ way to migrate from Oracle -&gt; MySQL.
    <ul>
      <li>(Why would Oracle allow Enterprise -&gt; Open-source migrations within their own product-line anyway?)</li>
    </ul>
  </li>
  <li><strong>DBConvert</strong> lacked support for Oracle versions before 10.x.x.
    <ul>
      <li>(Pricing also starts at $150 for Personal use, $1000 for Enterprise use)</li>
    </ul>
  </li>
  <li>A few Ruby gems (taps) lacked support for many of the Oracle column types, and the cx_Oracle driver in general.</li>
</ol>

<p>I decided to dust off an old college project, burn the midnight oil to revitalize it, and leverage it to solve this problem.</p>

<p id="code-snippet"></p>
<p>The project, <a href="https://github.com/seanharr11/etlalchemy" title="Navigate to etlalchemy github page"><strong>etlalchemy</strong></a>, is an open-sourced Python application which sits atop <a href="http://www.sqlalchemy.org/" title="Navigate to sqlalchemy.org"><strong>SQLAlchemy</strong></a>, and allows ETL (Extract, Transform, Load) functionality between any 2 SQL databases. The tool presents a <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python"><em>“Simple over Complex”</em></a> solution to the problem, allowing you to <em>Migrate any SQL Database with 4 Lines of Code</em>. (More advanced features are also available).</p>

<p>To install the tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>pip install etlalchemy
<span class="c"># On El Capitan:</span>
<span class="c">### pip install --ignore-installed etlalchemy</span>
</code></pre>
</div>

<p>To run the tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">etlalchemy</span> <span class="kn">import</span> <span class="n">ETLAlchemySource</span><span class="p">,</span> <span class="n">ETLAlchemyTarget</span>
<span class="c"># Migrate from SQL Server onto PostgreSQL</span>
<span class="n">src</span> <span class="o">=</span> <span class="n">ETLAlchemySource</span><span class="p">(</span><span class="s">"mssql+pyodbc://user:passwd@DSN_NAME"</span><span class="p">)</span>
<span class="n">tgt</span> <span class="o">=</span> <span class="n">ETLAlchemyTarget</span><span class="p">(</span><span class="s">"postgresql://user:passwd@hostname/dbname"</span><span class="p">,</span>
                          <span class="n">drop_database</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">addSource</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">migrate</span><span class="p">()</span>
</code></pre>
</div>

<p>Since solving my problem with the first pass of etlalchemy, I have spent months adding support for PostgreSQL, MySQL, Oracle, SQL Server, and SQLite. This means that with 4 lines of code, you can do things like migrate from SQL Server onto MySQL, migrate from Oracle onto PostgreSQL, or in my case migrate Oracle onto MySQL. Another helpful usecase is to migrate a remote MySQL database onto a local SQLite database to test an application on your local machine.</p>

<p>Happy Database Migrating!</p>

	  ]]></description>
	</item>


</channel>
</rss>
