<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>thelaziestprogrammer.com</title>
   
   <link>http://thelaziestprogrammer.com</link>
   <description>Because someone else has already solved your problem.</description>
   <language>en-uk</language>
   <managingEditor> Sean Harrington</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Connecting to SQL Server from SQLAlchemy on a Mac</title>
	  <link>/sharrington/databases/connecting-to-sql-server-with-sqlalchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2017-01-03T00:05:00-05:00</pubDate>
	  <guid>/sharrington/databases/connecting-to-sql-server-with-sqlalchemy</guid>
	  <description><![CDATA[
	     <p><em>This post explains how to connect to SQL Server using SQLAlchemy, pyodbc, UnixODBC and FreeTDS on a Mac</em></p>

<h3>Install UnixODBC &amp; FreeTDS</h3>

<ol>
  <li>Install via Homebrew
    <div class="highlighter-rouge"><pre class="highlight"><code>brew install unixodbc
brew install freetds --with-unixodbc
</code></pre>
    </div>
  </li>
  <li>Test with FreeTDS from terminal
    <div class="highlighter-rouge"><pre class="highlight"><code>tsql -S <span class="o">[</span>IP or Hostname] -U <span class="o">[</span>username] -P <span class="o">[</span>password]
locale is <span class="s2">"en_US.UTF-8"</span>
locale charset is <span class="s2">"UTF-8"</span>
using default charset <span class="s2">"UTF-8"</span>
1&gt;
</code></pre>
    </div>
  </li>
</ol>

<h3>Configure odbc.ini &amp; odbcinst.ini</h3>

<ol>
  <li>Open /usr/local/etc/odbcinst.ini, point to the driver at libtdsodbc.so&lt;/h3&gt;
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>FreeTDS]
Driver <span class="o">=</span> /usr/local/lib/libtdsodbc.so
Setup <span class="o">=</span> /usr/local/lib/libtdsodbc.so
FileUsage <span class="o">=</span> 1
</code></pre>
    </div>
  </li>
  <li>Open /usr/local/etc/odbc.ini and create new DSN
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>MSSQL_DSN]
<span class="nv">Driver</span><span class="o">=</span>FreeTDS
<span class="nv">Server</span><span class="o">=</span>10.110.0.200
<span class="nv">Port</span><span class="o">=</span>1433
<span class="nv">Database</span><span class="o">=</span>my_database_name
</code></pre>
    </div>
  </li>
  <li>Test the DSN
    <div class="highlighter-rouge"><pre class="highlight"><code>isql MSSQL_DSN username password -v
+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| <span class="nb">help</span> <span class="o">[</span>tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
<span class="gp">SQL&gt; </span>^D
</code></pre>
    </div>
  </li>
</ol>

<h3>Install pyodbc</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>pip install pyodbc
</code></pre>
</div>

<h3>Connect with sqlalchemy</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">"mssql+pyodbc://username:password@MSSQL_DSN"</span><span class="p">)</span>
</code></pre>
</div>

<p>Hopefully you can quickly get connected to your SQL Server instance via Python with the steps above. For me, it has been notoriously more difficult to connect to than other databases like MySQL and PostgreSQL. In fact, I built an open-sourced tool to migrate an entire database (or a handful of tables) from SQL Server, to any other RDBMS like MySQL.</p>

<p><a href="https://github.com/seanharr11/etlalchemy">Check out etlalchemy here on github</a></p>

<hr />

<h4>A couple of notes...</h4>

<ol>
  <li>Depending on the SQL Server version you are connecting to, you may need to specify a TDS Protocol Version in <em>/usr/local/etc/freetds.conf</em>:
    <div class="highlighter-rouge"><pre class="highlight"><code><span class="o">[</span>global]
    <span class="c"># Uncomment below to guess protocol</span>
    <span class="c"># tds version = auto</span>
    tds version <span class="o">=</span> 7.3
</code></pre>
    </div>
  </li>
</ol>

<p><strong>Full Compatability Matrix</strong> (from <a href="http://www.freetds.org/userguide/choosingtdsprotocol.htm">http://freetds.org</a>)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Product</th>
      <th style="text-align: left">TDS Version</th>
      <th style="text-align: left">Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Sybase before System 10, Microsoft SQL Server 6.x</td>
      <td style="text-align: left">4.2</td>
      <td style="text-align: left">Still works with all products, subject to its limitations.</td>
    </tr>
    <tr>
      <td style="text-align: left">Sybase System 10 and above</td>
      <td style="text-align: left">5.0</td>
      <td style="text-align: left">Still the most current protocol used by Sybase.</td>
    </tr>
    <tr>
      <td style="text-align: left">Sybase System SQL Anywhere</td>
      <td style="text-align: left">5.0 <em>only</em></td>
      <td style="text-align: left">Originally Watcom SQL Server, a completely separate codebase. Our best information is that SQL Anywhere first supported TDS in version 5.5.03 using the OpenServer Gateway (OSG), and native TDS 5.0 support arrived with version 6.0.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 7.0</td>
      <td style="text-align: left">7.0</td>
      <td style="text-align: left">Includes support for the extended datatypes in SQL Server 7.0 (such as char/varchar fields of more than 255 characters), and support for Unicode.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2000</td>
      <td style="text-align: left">7.1</td>
      <td style="text-align: left">Include support for bigint (64 bit integers), variant and collation on all fields. Collation is not widely used.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2005</td>
      <td style="text-align: left">7.2</td>
      <td style="text-align: left">Includes support for varchar(max), varbinary(max), xml datatypes and MARS[a].</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2008</td>
      <td style="text-align: left">7.3</td>
      <td style="text-align: left">Includes support for time, date, datetime2, datetimeoffset.</td>
    </tr>
    <tr>
      <td style="text-align: left">Microsoft SQL Server 2012 or 2014</td>
      <td style="text-align: left">7.4</td>
      <td style="text-align: left">Includes support for session recovery.</td>
    </tr>
    <tr>
      <td style="text-align: left">N/A</td>
      <td style="text-align: left">8.0</td>
      <td style="text-align: left">FreeTDS will alias this version to 7.1 for backwards compatibility reasons, but this should be avoided due to future compatibility concerns. See note below on obsolete versions.</td>
    </tr>
  </tbody>
</table>


	  ]]></description>
	</item>

	<item>
	  <title>REST API with Flask-Restless and SQLAlchemy</title>
	  <link>/sharrington/web-development/sqlalchemy-defined-rest-api</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-08-19T02:32:00-04:00</pubDate>
	  <guid>/sharrington/web-development/sqlalchemy-defined-rest-api</guid>
	  <description><![CDATA[
	     <p>This post shows how to auto-generate a REST API from a handful of SQLAlchemy models. This means full CRUD <em>(POST, GET, PUT, DELETE)</em> endpoint generation for each SQLAlchemy model defined.</p>

<p>Let’s say our company is building a Single-Page Application for librarians &amp; readers that accomplishes the following 2 goals:</p>

<ol>
  <li>Show the availability and information of a given book to readers.</li>
  <li>Allow a librarian to perform CRUD operations to update their libary’s inventory.</li>
</ol>

<p>We’ve been tasked with building a REST API to allow a Single-Page Application to interface with our database.</p>

<h4 id="environment-setup">Environment Setup</h4>
<ol>
  <li>Create project root directory.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
</code></pre>
    </div>
  </li>
  <li>Create and activate virtualenv.
    <div class="highlighter-rouge"><pre class="highlight"><code>cd automagic_api;
virtualenv env;
source env/bin/activate
</code></pre>
    </div>
  </li>
  <li>Install flask-restless and sqlalchemy
    <div class="highlighter-rouge"><pre class="highlight"><code>pip install flask-restless sqlalchemy
</code></pre>
    </div>
  </li>
</ol>

<p>Your project directory tree should look as follows:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
env/
</code></pre>
</div>

<h4 id="further-compartmentalize-the-project-and-define-our-models">Further compartmentalize the project and define our models</h4>

<ol>
  <li>Create nested project directory ‘/automagic_api’ to hold Flask-specific files.
    <div class="highlighter-rouge"><pre class="highlight"><code>mkdir automagic_api
cd automagic_api
</code></pre>
    </div>
  </li>
  <li>Create <strong>‘models.py’</strong> within the flask-project directory and define <strong>Book</strong> and <strong>Author</strong>..</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">ForeignKey</span><span class="p">,</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">Boolean</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">backref</span><span class="p">,</span> <span class="n">relationship</span>
<span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">Base</span>

<span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="c"># API endpoint will take the form '/api/__tablename__'</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">Book</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="nd">@declared_attr</span>
    <span class="k">def</span> <span class="nf">__tablename__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
    <span class="n">title</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="n">author_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> 
        <span class="n">ForeignKey</span><span class="p">(</span><span class="s">"author.id"</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span> 
        <span class="n">backref</span><span class="o">=</span><span class="n">backref</span><span class="p">(</span><span class="s">'books'</span><span class="p">))</span>  
    <span class="n">is_available</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Boolean</span><span class="p">)</span>


</code></pre>
</div>

<p>Your directory structure should now look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
   env/
</code></pre>
</div>

<h4 id="create-controllerspy-to-define-endpoints">Create controllers.py to define endpoints</h4>

<p>Below we define our 2 <a href="http://flask-restless.readthedocs.io/en/stable/basicusage.html">Flask-restless API blueprints</a>: one for <strong>Book</strong> and one for <strong>Author</strong>, which when instantiated, construct the CRUD endpoints for each respective model.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">manager</span>
<span class="kn">from</span> <span class="nn">automagic_api.models</span>\
    <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">author_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Author</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>
<span class="n">book_api_blueprint</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">create_api_blueprint</span><span class="p">(</span><span class="n">Book</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'PATCH'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>

</code></pre>
</div>

<h4 id="your-directory-should-now-look-like">Your directory should now look like:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   automagic_api/
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="create-initpy-in-our-flask-project">Create __init__.py in our Flask-project</h4>

<p>Create the file in <strong>‘automagic_api/automagic_api/’</strong>. This file will import our <strong>models.py</strong>, our <strong>controllers.py</strong> and instantiate our API.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">flask</span>
<span class="kn">import</span> <span class="nn">flask_restless</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span><span class="p">,</span> <span class="n">declared_attr</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">sessionmaker</span><span class="p">,</span> <span class="n">scoped_session</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">flask</span><span class="o">.</span><span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c"># Create our SQLAlchemy DB engine</span>
<span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">'sqlite:///foobar.db'</span><span class="p">)</span>
<span class="n">Session</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">,</span> <span class="n">autocommit</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">autoflush</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">scoped_session</span><span class="p">(</span><span class="n">Session</span><span class="p">)</span>

<span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>
<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">bind</span> <span class="o">=</span> <span class="n">engine</span>

<span class="c"># Import all models to add them to Base.metadata</span>
<span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Book</span><span class="p">,</span> <span class="n">Author</span>

<span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">()</span>

<span class="n">manager</span> <span class="o">=</span> <span class="n">flask_restless</span><span class="o">.</span><span class="n">APIManager</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">session</span><span class="o">=</span><span class="n">s</span><span class="p">)</span>
<span class="c"># Register flask-restless blueprints to instantiate CRUD endpoints</span>
<span class="kn">from</span> <span class="nn">controllers</span> <span class="kn">import</span> <span class="n">book_api_blueprint</span><span class="p">,</span> <span class="n">author_api_blueprint</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">author_api_blueprint</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">register_blueprint</span><span class="p">(</span><span class="n">book_api_blueprint</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="create-runpy">Create run.py</h4>

<p>Create <strong>run.py</strong> in our root directory</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">automagic_api</span> <span class="kn">import</span> <span class="n">app</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">'0.0.0.0'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre>
</div>

<h4 id="your-final-directory-structure-should-look-as-follows">Your final directory structure should look as follows:</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>automagic_api/
   run.py
   automagic_api/
       __init__.py
       models.py
       controllers.py
   env/
</code></pre>
</div>

<h4 id="start-and-test-your-api">Start and test your API!</h4>

<p>In the project root, start the server</p>

<div class="highlighter-rouge"><pre class="highlight"><code>env/bin/python run.py
</code></pre>
</div>

<p>In a python CLI, create a POST request to create a new <strong>Book</strong>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">json</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="s">'title'</span><span class="p">:</span> <span class="s">"The Eye of the World"</span><span class="p">,</span>
    <span class="s">'author'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'first_name'</span><span class="p">:</span> <span class="s">"Robert"</span><span class="p">,</span>
        <span class="s">'last_name'</span><span class="p">:</span> <span class="s">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s">'is_available'</span><span class="p">:</span> <span class="bp">True</span>
<span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">'content-type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">"http://localhost:5000/api/book"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">),</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">status_code</span>
<span class="mi">201</span>
</code></pre>
</div>

<p>Go ahead and open up a web browser, and navigate to <a href="http://localhost:5000/api/book">http://localhost:5000/api/book</a> to see the <em>Book</em> object that you just POSTed to your sqlite database.</p>

<p>Likewise, you can invert this request and check out <a href="http://localhost:5000/api/author">http://localhost:5000/api/author</a> to see the <em>Author</em> object that was created, and the nested <em>“books”</em> attribute that the author has written.</p>

<ul>
  <li><em><strong>Note</strong>: URLs for the API are constructed based off of the <strong>__tablename__</strong> of the sqlalchemy model, and are prefixed with “/api” (i.e Book -&gt; “/api/book”)</em></li>
</ul>

<p>Congratulations, you now have a working boilerplate for a SQLAlchemy-model defined REST API. Now go ahead and add more models and endpoints!</p>

<h4 id="final-remarks">Final Remarks</h4>

<p>The reason that I use Flask-restless for day-to-day APIs is it’s abstraction.</p>

<ol>
  <li>It preserves abstraction between the database’s relational model, and the JSON schema expected as input and output to the API</li>
  <li>It preserves abstraction between SQLAlchemy, and the SQL dialect under-the-hood.</li>
</ol>

<p>For instance, when I POST the following payload from a client application, I don’t care about the relational model between an <strong>Author</strong> and a <strong>Book</strong>, I just care that the JSON <strong>Book</strong> object contains a nested <strong>Author</strong> in its schema. By providing the nested <strong>Author</strong> object <em>WITHOUT</em> an <strong>id</strong> field, I implicitly CREATE this Author in the database.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
        <span class="s1">'first_name'</span><span class="err">:</span> <span class="s2">"Robert"</span><span class="p">,</span>
        <span class="s1">'last_name'</span><span class="err">:</span> <span class="s2">"Jordan"</span>
        <span class="p">},</span>  
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Conversely, if I would like to create a book that references a pre-existing author, I would changed my nested <strong>Author</strong> object to contain the <strong>id</strong> of the <strong>Author</strong> who wrote it.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span> 
    <span class="s1">'title'</span><span class="err">:</span> <span class="s2">"The Eye of the World"</span><span class="p">,</span>
    <span class="s1">'author'</span><span class="err">:</span> <span class="p">{</span>
         <span class="s1">'id'</span><span class="err">:</span> <span class="mi">1</span>   
     <span class="p">},</span>
     <span class="c1">// or, we could break abstraction and assign an 'author_id':</span>
     <span class="c1">// 'author_id': 1,</span>
    <span class="s1">'is_available'</span><span class="err">:</span> <span class="nx">True</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Regarding preservation of SQLAlchemy’s level of abstraction, Flask-restless goes as far as to implement SQLAlchemy’s <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html">Query API</a> at the REST API level. Take the following example:</p>

<p>If Robert Jordan wrote 14 books (which he did in a painstakingly long series), and I only wanted to grab all books that Robert Jordan penned which are <strong>available</strong> in the library I could run the following query:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>http://localhost:5000/api/book?q={"filters":[{"name":"is_available","op":"==","val":true},{"name":"author_id","op":"==","val":1}]}
</code></pre>
</div>

<p>This would return our targeted books, and translates to running the following in SQLAlchemy:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Book</span><span class="p">)</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">author_id</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> 
    <span class="n">Book</span><span class="o">.</span><span class="n">is_available</span> <span class="o">==</span> <span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre>
</div>

<ul>
  <li>The searchformat API also implements <em>order_by</em>, <em>limit</em>, <em>offset</em> and <em>group_by</em>. <br /><a href="http://flask-restless.readthedocs.io/en/stable/searchformat.html">See Flask-restless searchformat</a></li>
</ul>

<p>These 2 key features make this tool perfect for Single-Page Applications that need to communicate with an API server.</p>

<p><em>A huge thanks to the brilliant developers of Flask, Flask-restless and SQLAlchemy. I am but a humble messenger spreading the work of others…</em></p>


	  ]]></description>
	</item>

	<item>
	  <title>Installing cx_Oracle Driver on El Capitan</title>
	  <link>/sharrington/databases/oracle/install-cx_oracle-mac</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/oracle/install-cx_oracle-mac</guid>
	  <description><![CDATA[
	     <h5 id="download-oracle-instantclient">Download Oracle instantclient</h5>
<ol>
  <li>Navigate to the <a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">‘Oracle Instant Client Downloads’</a> page.</li>
  <li>Download <strong>instantclient-basic-macos.x64-12.1.0.2.0.zip</strong> and <strong>instantclient-sdk-macos.x64-12.1.0.2.0.zip</strong>
    <ul>
      <li>You will need an Oracle account to proceed with the download.</li>
    </ul>
  </li>
  <li>Enter the ‘~/Downloads’ folder in Terminal, and unzip both downloads:</li>
</ol>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads
<span class="c"># Or 'cd &lt;download_directory&gt;'</span>
unzip instantclient-basic-macos.x64-12.1.0.2.0.zip
<span class="c"># Running the below 'unzip' command will automagically </span>
<span class="c"># place the unzipped contents in 'instantclient_12_1/sdk'</span>
unzip instantclient-sdk-macos.x64-12.1.0.2.0.zip
</code></pre>
</div>

<h5 id="move-directory-and-link-libclntshdylib121">Move directory and link libclntsh.dylib.12.1</h5>

<div class="highlighter-rouge"><pre class="highlight"><code>mv instantclient_12_1 /usr/local/opt/instantclient_12_1
<span class="nb">cd</span> /usr/local/opt/instantclient_12_1
ln -s libclntsh.dylib.12.1 libclntsh.dylib
</code></pre>
</div>

<h5 id="configure-environment-variables">Configure environment variables</h5>

<div class="highlighter-rouge"><pre class="highlight"><code># Tell cx_Oracle setup.py where to find instantclient libs
export ORACLE_HOME=/usr/local/opt/instantclient_12_1
# Set -rpath option to tell gcc to look in ORACLE_HOME when linking
export FORCE_RPATH=1

</code></pre>
</div>

<h5 id="download-and-install-cxoracle">Download and install cx_Oracle</h5>

<div class="highlighter-rouge"><pre class="highlight"><code># Install with pip
pip install cx_Oracle
</code></pre>
</div>

<h5 id="verify-cxoracle-was-correctly-installed">Verify cx_Oracle was correctly installed</h5>

<div class="highlighter-rouge"><pre class="highlight"><code>python -c "import cx_Oracle"
</code></pre>
</div>

<p>If this fails then you may see the following exception:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: dlopen(/Library/Python/2.7/site-packages/cx_Oracle.so, 2): Library not loaded: @rpath/libclntsh.dylib.12.1
  Referenced from: /Library/Python/2.7/site-packages/cx_Oracle.so
  Reason: image not found
</code></pre>
</div>

<p>If you are seeing this exception, you either skipped setting <code class="highlighter-rouge">ORACLE_HOME</code> and <code class="highlighter-rouge">FORCE_RPATH</code> (as described above), or you are using a cached version of the cx_Oracle build when installing. To force pip to re-build the package, run:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>pip install --no-cache-dir --allow-external --allow-unverified cx_oracle
</code></pre>
</div>

<p><em>Thanks to <a href="http://stackoverflow.com/users/4799035/christopher-jones">Christopher Jones</a> for help simplifying the above steps.</em></p>


	  ]]></description>
	</item>

	<item>
	  <title>Migrating Between SQL Databases</title>
	  <link>/sharrington/databases/migrating-between-databases-with-etlalchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/migrating-between-databases-with-etlalchemy</guid>
	  <description><![CDATA[
	     <p><br />
We can all agree on one thing: SQL Databases are here to stay.</p>

<p>However, for one reason or another, sometimes they stay in one place for too long.</p>

<p style="text-align: center"><a href="#code-snippet">Jump to Code Snippet</a></p>

<p>I started my most recent job in June 2015, where I was responsible for projects spanning various fields, ranging from Web Development to Machine Learning. After learning that we kept the majority of our data in an <strong>Oracle 9i</strong> RDBMS, and learning that Oracle pulled support for the system in July 2010, naturally the first move to make was to migrate onto a different RDBMS, or to upgrade.</p>

<p>In short, we chose to migrate from Oracle onto MySQL as our target RDBMS. So began my journey to migrate off of a database as old as the sea turtle in the banner above, and onto a modern solution.</p>

<p>As most projects do, the project grew from a simple database migration, to a database migration requiring cleaning data, altering schema, identifying and dropping unused/legacy columns etc… We identified the following requirements when searching for a solution:</p>

<ol>
  <li><strong>No Loss of Information</strong>
    <ul>
      <li><em>Data, schema, constraints and indexes all must be migrated without any loss of information.</em></li>
    </ul>
  </li>
  <li><strong>Automated Solution</strong>
    <ul>
      <li><em>Avoid .sql scripts and manual scripting.</em></li>
      <li><em>‘Push-button’ solution, rather than several small procedures.</em></li>
    </ul>
  </li>
  <li><strong>High Degree of Customizability.</strong>
    <ul>
      <li><em>Adding custom rules for schema transformations.</em></li>
      <li><em>Adding custom rules for data transformations.</em></li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li><em>Fast enough to test multiple runs per day.</em></li>
    </ul>
  </li>
</ol>

<p>The immediate solutions failed:</p>

<ol>
  <li><strong>MySQL Workbench</strong> involved a great deal of manual configuring, and no ‘automated’ way to migrate from Oracle -&gt; MySQL.
    <ul>
      <li>(Why would Oracle allow Enterprise -&gt; Open-source migrations within their own product-line anyway?)</li>
    </ul>
  </li>
  <li><strong>DBConvert</strong> lacked support for Oracle versions before 10.x.x.
    <ul>
      <li>(Pricing also starts at $150 for Personal use, $1000 for Enterprise use)</li>
    </ul>
  </li>
  <li>A few Ruby gems (taps) lacked support for many of the Oracle column types, and the cx_Oracle driver in general.</li>
</ol>

<p>I decided to dust off an old college project, burn the midnight oil to revitalize it, and leverage it to solve this problem.</p>

<p id="code-snippet"></p>
<p>The project, <a href="https://github.com/seanharr11/etlalchemy" title="Navigate to etlalchemy github page"><strong>etlalchemy</strong></a>, is an open-sourced Python application which sits atop <a href="http://www.sqlalchemy.org/" title="Navigate to sqlalchemy.org"><strong>SQLAlchemy</strong></a>, and allows ETL (Extract, Transform, Load) functionality between any 2 SQL databases. The tool presents a <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python"><em>“Simple over Complex”</em></a> solution to the problem, allowing you to <em>Migrate any SQL Database with 4 Lines of Code</em>. (More advanced features are also available).</p>

<p>To install the tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>pip install etlalchemy
<span class="c"># On El Capitan:</span>
<span class="c">### pip install --ignore-installed etlalchemy</span>
</code></pre>
</div>

<p>To run the tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">etlalchemy</span> <span class="kn">import</span> <span class="n">ETLAlchemySource</span><span class="p">,</span> <span class="n">ETLAlchemyTarget</span>
<span class="c"># Migrate from SQL Server onto PostgreSQL</span>
<span class="n">src</span> <span class="o">=</span> <span class="n">ETLAlchemySource</span><span class="p">(</span><span class="s">"mssql+pyodbc://user:passwd@DSN_NAME"</span><span class="p">)</span>
<span class="n">tgt</span> <span class="o">=</span> <span class="n">ETLAlchemyTarget</span><span class="p">(</span><span class="s">"postgresql://user:passwd@hostname/dbname"</span><span class="p">,</span>
                          <span class="n">drop_database</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">addSource</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">migrate</span><span class="p">()</span>
</code></pre>
</div>

<p>Since solving my problem with the first pass of etlalchemy, I have spent months adding support for PostgreSQL, MySQL, Oracle, SQL Server, and SQLite. This means that with 4 lines of code, you can do things like migrate from SQL Server onto MySQL, migrate from Oracle onto PostgreSQL, or in my case migrate Oracle onto MySQL. Another helpful usecase is to migrate a remote MySQL database onto a local SQLite database to test an application on your local machine.</p>

<p>Happy Database Migrating!</p>

	  ]]></description>
	</item>


</channel>
</rss>
