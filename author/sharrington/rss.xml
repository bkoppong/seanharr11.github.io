<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>thelaziestprogrammer.com</title>
   
   <link>http://thelaziestprogrammer.com</link>
   <description>Because someone else has already solved your problem.</description>
   <language>en-uk</language>
   <managingEditor> Sean Harrington</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Installing cx_Oracle Driver on El Capitan</title>
	  <link>/sharrington/databases/oracle/install-cx_oracle-mac</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/oracle/install-cx_oracle-mac</guid>
	  <description><![CDATA[
	     <h4>Problem:</h4>

<blockquote>
<p>How to install cx_Oracle driver on Mac (El Capitan)</p>
</blockquote>

<h5>Download Oracle instantclient</h5>

<ol>
<li>Navigate to the <a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">&#39;Oracle Instant Client Downloads&#39;</a> page.</li>
<li>Download <strong>instantclient-basic-macos.x64-12.1.0.2.0.zip</strong> and <strong>instantclient-sdk-macos.x64-12.1.0.2.0.zip</strong>

<ul>
<li>You will need an Oracle account to proceed with the download.</li>
</ul></li>
<li>Enter the &#39;~/Downloads&#39; folder in Terminal, and unzip both downloads:</li>
</ol>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~/Downloads
<span class="c"># Or 'cd &lt;download_directory&gt;'</span>
unzip instantclient-basic-macos.x64-12.1.0.2.0.zip
unzip instantclient-sdk-macos.x64-12.1.0.2.0.zip
</code></pre></div>
<h5>Configure Oracle instantclient</h5>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">mv instantclient_12_1 /usr/local/opt/instantclient_12_1
<span class="nb">cd</span> /usr/local/opt/instantclient_12_1
<span class="c"># setup.py will look in the 'lib' directory</span>
mkdir lib
mv <span class="k">*</span>.dylib<span class="k">*</span> lib
<span class="c"># Create version-agnostic soft links</span>
<span class="nb">cd</span> /usr/local/opt/instantclient_12_1/lib
ln -s libclntsh.dylib.12.1 libclntsh.dylib
ln -s libocci.dylib.12.1 libocci.dylib
</code></pre></div>
<h5>Configure environment variables</h5>
<div class="highlight"><pre><code class="language-" data-lang=""># Tell cx_Oracle setup.py where to find instantclient libs
echo 'export ORACLE_HOME=/usr/local/opt/instantclient_12_1' &gt;&gt; ~/.bash_profile
echo 'export DYLD_LIBRARY_PATH=$ORACLE_HOME' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
# Set -rpath option to tell gcc to look in ORACLE_HOME when linking
export FORCE_RPATH=1

</code></pre></div>
<h5>Download and install cx_Oracle</h5>
<div class="highlight"><pre><code class="language-" data-lang=""># Install with pip
pip install cx_Oracle
</code></pre></div>
<h5>Verify cx_Oracle was correctly installed</h5>
<div class="highlight"><pre><code class="language-" data-lang="">python -c "import cx_Oracle"
# If this fails, reinstall cx_oracle with:
# pip install --no-cache-dir --allow-external --allow-unverified cx_oracle
</code></pre></div>
<p>If this reports no errors, then you are ready to use the driver! Oracle is a pain in the ass, hope this helps...</p>

	  ]]></description>
	</item>

	<item>
	  <title>Migrating Between SQL Databases</title>
	  <link>/sharrington/databases/migrating-between-databases-with-etlalchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>/sharrington/databases/migrating-between-databases-with-etlalchemy</guid>
	  <description><![CDATA[
	     <h5>Problem:</h5>

<blockquote>
<p>How to migrate from one SQL database to another.</p>
</blockquote>

<p>We can all agree on one thing: SQL Databases are here to stay. </p>

<p>However, for one reason or another, sometimes they stay in one place for too long.</p>

<p>I started my most recent job in June 2015, where I was responsible for projects spanning various fields, ranging from Web Development to Machine Learning. After learning that we kept the majority of our data in an <strong>Oracle 9i</strong> RDBMS, and learning that Oracle pulled support for the system in July 2010, naturally the first move to make was to migrate onto a different RDBMS, or to upgrade.</p>

<p>In short, we chose to migrate from Oracle onto MySQL as our target RDBMS. So began my journey to migrate off of a database as old as the sea turtle in the banner above, and onto a modern solution.</p>

<p>As most projects do, the project grew from a simple database migration, to a database migration requiring cleaning data, altering schema, identifying and dropping unused/legacy columns etc... We identified the following requirements when searching for a solution:</p>

<ol>
<li><strong>No Loss of Information</strong>

<ul>
<li><em>Data, schema, constraints and indexes all must be migrated without any loss of information.</em></li>
</ul></li>
<li><strong>Automated Solution</strong>

<ul>
<li><em>Avoid .sql scripts and manual scripting.</em></li>
<li><em>&#39;Push-button&#39; solution, rather than several small procedures.</em> </li>
</ul></li>
<li><strong>High Degree of Customizability.</strong>

<ul>
<li><em>Adding custom rules for schema transformations.</em></li>
<li><em>Adding custom rules for data transformations.</em></li>
</ul></li>
<li><strong>Performance</strong>

<ul>
<li><em>Fast enough to test multiple runs per day.</em></li>
</ul></li>
</ol>

<p>The immediate solutions failed:</p>

<ol>
<li><strong>MySQL Workbench</strong> involved a great deal of manual configuring, and no &#39;automated&#39; way to migrate from Oracle -&gt; MySQL.

<ul>
<li>(Why would Oracle allow Enterprise -&gt; Open-source migrations within their own product-line anyway?)</li>
</ul></li>
<li><strong>DBConvert</strong> lacked support for Oracle versions before 10.x.x. 

<ul>
<li>(Pricing also starts at $150 for Personal use, $1000 for Enterprise use)</li>
</ul></li>
<li>A few Ruby gems (taps) lacked support for many of the Oracle column types, and the cx_Oracle driver in general.</li>
</ol>

<p>I decided to dust off an old college project, burn the midnight oil to revitalize it, and leverage it to solve this problem.</p>

<p>The project, <a href="https://github.com/seanharr11/etlalchemy" title="Navigate to etlalchemy github page"><strong>etlalchemy</strong></a>, is an open-sourced Python application which sits atop <a href="http://www.sqlalchemy.org/" title="Navigate to sqlalchemy.org"><strong>SQLAlchemy</strong></a>, and allows ETL (Extract, Transform, Load) functionality between any 2 SQL databases. The tool presents a <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python"><em>&quot;Simple over Complex&quot;</em></a> solution to the problem, allowing you to <em>Migrate any SQL Database with 4 Lines of Code</em>. (More advanced features are also available).</p>

<p>To install the tool:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">pip install etlalchemy
<span class="c"># On El Capitan:</span>
<span class="c">### pip install --ignore-installed etlalchemy</span>
</code></pre></div>
<p>To run the tool:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">etlalchemy</span> <span class="kn">import</span> <span class="n">ETLAlchemySource</span><span class="p">,</span> <span class="n">ETLAlchemyTarget</span>
<span class="c"># Migrate from SQL Server onto PostgreSQL</span>
<span class="n">src</span> <span class="o">=</span> <span class="n">ETLAlchemySource</span><span class="p">(</span><span class="s">"mssql+pyodbc://user:passwd@DSN_NAME"</span><span class="p">)</span>
<span class="n">tgt</span> <span class="o">=</span> <span class="n">ETLAlchemyTarget</span><span class="p">(</span><span class="s">"postgresql://user:passwd@hostname/dbname"</span><span class="p">,</span>
                          <span class="n">drop_database</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">addSource</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">migrate</span><span class="p">()</span>
</code></pre></div>
<p>Since solving my problem with the first pass of etlalchemy, I have spent months adding support for PostgreSQL, MySQL, Oracle, SQL Server, and SQLite. This means that with 4 lines of code, you can do things like migrate from SQL Server onto MySQL, migrate from Oracle onto PostgreSQL, or in my case migrate Oracle onto MySQL. Another helpful usecase is to migrate a remote MySQL database onto a local SQLite database to test an application on your local machine.</p>

<p>Happy Database Migrating!</p>

	  ]]></description>
	</item>


</channel>
</rss>
