<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>seanharr11.github.io/</title>
   
   <link>http://seanharr11.github.io</link>
   <description>Because someone else has already built a solution to your problem.</description>
   <language>en-uk</language>
   <managingEditor> Sean Harrington</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Migrating Between SQL Databases</title>
	  <link>//etl-alchemy</link>
	  <author>Sean Harrington</author>
	  <pubDate>2016-07-14T01:05:00-04:00</pubDate>
	  <guid>//etl-alchemy</guid>
	  <description><![CDATA[
	     <p>We can all agree on one thing: SQL Databases are here to stay.</p>

<p>However, for one reason or another, sometimes they stay in one place for too long.</p>

<p>I started my most recent job in June 2015, where I was responsible for projects spanning various fields, ranging from Web Development to Machine Learning. After learning that we kept the majority of our data in an <strong>Oracle 9i</strong> RDBMS, and learning that Oracle pulled support for the system in July 2010, naturally the first move to make was to migrate onto a different RDBMS, or to upgrade.</p>

<p>To cut to the chase, we chose MySQL as our target RDBMS. So began my journey to migrate off of a DB as old as the sea turtle in the banner above, and onto a modern solution.</p>

<p>As most projects do, the project grew from a simple database migration, to a database migration requiring cleaning data, altering schema, identifying and dropping unused/legacy columns etc… We identified the following requirements when searching for a solution:</p>

<ol>
  <li><strong>No Loss of Information</strong>
    <ul>
      <li><em>Data, schema, constraints and indexes all must be migrated without any loss of information.</em></li>
    </ul>
  </li>
  <li><strong>Automated Solution</strong>
    <ul>
      <li><em>We wanted to avoid .sql scripts, and to avoid an iterative, stateful process (in case things went south halfway through).</em></li>
    </ul>
  </li>
  <li><strong>High degree of customizability.</strong>
    <ul>
      <li><em>Adding custom rules for schema transformations.</em></li>
      <li><em>Adding custom rules for data transformations.</em></li>
    </ul>
  </li>
  <li><strong>Performance</strong>
    <ul>
      <li><em>Fast enough to test multiple runs per day.</em></li>
    </ul>
  </li>
</ol>

<p>The immediate solutions failed:</p>

<ol>
  <li><strong>MySQL Workbench</strong> involved a great deal of manual configuring, and no ‘automated’ way to migrate from Oracle -&gt; MySQL.
    <ul>
      <li>(Why would Oracle allow Enterprise -&gt; Open-source migrations within their own product-line anyway?)</li>
    </ul>
  </li>
  <li><strong>DBConvert</strong> lacked support for Oracle versions before 10.x.x.
    <ul>
      <li>(Pricing also starts at $150 for Personal use, $1000 for Enterprise use)</li>
    </ul>
  </li>
  <li>A few Ruby gems lacked support for older version of the cx_Oracle driver.</li>
</ol>

<p>I decided to dust off an old college project, burn the midnight oil to revitalize it, and leverage it to solve this problem.</p>

<p>The project, <a href="https://github.com/seanharr11/etlalchemy" title="Navigate to etlalchemy github page"><strong>etlalchemy</strong></a>, is an open-sourced Python application which sits atop <a href="http://www.sqlalchemy.org/" title="Navigate to sqlalchemy.org"><strong>SQLAlchemy</strong></a>, and allows ETL (Extract, Transform Load) functionality between any 2 SQL databases. The tool presents a <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python"><em>“Simple over Complex”</em></a> solution to the problem, allowing you to <em>Migrate any SQL Database with 4 Lines of Code</em>. (More advanced features are also available).</p>

<p>To install the tool:</p>

<div class="language-bash highlighter-rouge"><pre class="highlight"><code>pip install etlalchemy
</code></pre>
</div>

<p>To run the tool:</p>

<div class="language-python highlighter-rouge"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">etlalchemy</span> <span class="kn">import</span> <span class="n">ETLAlchemySource</span><span class="p">,</span> <span class="n">ETLAlchemyTarget</span>

<span class="n">src</span> <span class="o">=</span> <span class="n">ETLAlchemySource</span><span class="p">(</span><span class="s">"mssql+pyodbc://username:password@DSN_NAME"</span><span class="p">)</span>
<span class="n">tgt</span> <span class="o">=</span> <span class="n">ETLAlchemyTarget</span><span class="p">(</span><span class="s">"mysql://username:password@hostname/db_name"</span><span class="p">,</span>
                          <span class="n">drop_database</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">addSource</span><span class="p">(</span><span class="n">mssql_db_source</span><span class="p">)</span>
<span class="n">tgt</span><span class="o">.</span><span class="n">migrate</span><span class="p">()</span>
</code></pre>
</div>

<p>Since solving the Oracle -&gt; MySQL problem with etlalchemy, I have spent months adding support for PostgreSQL, MySQL, Oracle, SQL Server, and SQLite. More recently I have been chiseling the code to increase performance, and this week (mid-July 2016) I have made the github repo public after testing all the aforementioned RDBMS’s as both Sources, and Targets.</p>

<p>It is my hope that many of you find this tool useful, and are able to leverage this tool to carry out database migrations with very short turnaround.</p>


	  ]]></description>
	</item>


</channel>
</rss>
